{
  "address": "0x71eD65C3705d52f3f2e8153b192a82d3D2c754ea",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "lock",
          "type": "bool"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "NewTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "burnt",
          "type": "bool"
        }
      ],
      "name": "TokenBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "minted",
          "type": "bool"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "unlock",
          "type": "bool"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chainA",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct Bridge.TokenInfo",
          "name": "extraArgs",
          "type": "tuple"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "lockETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawTaxERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawTaxETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb68a2458aedc1b7f32e5604139045fc0e3995891f4374a05a8e2fe26afaabaf",
  "receipt": {
    "to": null,
    "from": "0x8717799c46091C4A3767102dDA0A6057339C5Fa0",
    "contractAddress": "0x71eD65C3705d52f3f2e8153b192a82d3D2c754ea",
    "transactionIndex": 0,
    "gasUsed": "1983547",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x01db7ef7f73291f2739a693a6fa401c2fc8abb93a0a8d8c210bcaa1987248d1a",
    "transactionHash": "0xdb68a2458aedc1b7f32e5604139045fc0e3995891f4374a05a8e2fe26afaabaf",
    "logs": [],
    "blockNumber": 13794160,
    "cumulativeGasUsed": "1983547",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab14f2776b9e979f11e042e07fcbf177",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"NewTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"burnt\",\"type\":\"bool\"}],\"name\":\"TokenBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unlock\",\"type\":\"bool\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainA\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.TokenInfo\",\"name\":\"extraArgs\",\"type\":\"tuple\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"lockETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTaxERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTaxETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,address,uint256)\":{\"details\":\"burn tokens that were minted on this chain, unlocks on the other chain\",\"params\":{\"amount\":\"amount of tokens to burn\",\"recipient\":\"address that receives the tokens on the other chain\",\"tokenIn\":\"is the token contract address on this chain\"}},\"lockETH(address)\":{\"details\":\"lock ETH to be minted on the other chain\",\"params\":{\"recipient\":\"address that receives the tokens on the other chain\"}},\"lockToken(address,address,uint256)\":{\"details\":\"lock tokens to be minted on the other chain\",\"params\":{\"amount\":\"amount of tokens to lock\",\"recipient\":\"address that receives the tokens on the other chain\",\"tokenIn\":\"is the token contract address on this chain\"}},\"mint(address,address,address,uint256)\":{\"details\":\"mint tokens that were locked on the other chain\",\"params\":{\"amount\":\"amount of tokens to mint\",\"recipient\":\"address that receives the tokens on this chain\",\"sender\":\"address that locked the tokens on the other chain\",\"tokenOut\":\"is the token contract address on this chain\"}},\"unlockETH(address,address,uint256)\":{\"details\":\"unlock ETH after burning them on the other chain\",\"params\":{\"amount\":\"amount of tokens to unlock\",\"recipient\":\"address that receives the unlocked tokens on this chain\",\"sender\":\"is the account that burnt tokens on the other chain\"}},\"unlockToken(address,address,address,uint256)\":{\"details\":\"unlock tokens after burning them on the other chain\",\"params\":{\"amount\":\"amount of tokens to unlock\",\"recipient\":\"address that receives the unlocked tokens on this chain\",\"sender\":\"is the account that burnt tokens on the other chain\",\"tokenOut\":\"is the token contract address on this chain\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/base/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/bridge/base/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '../../interfaces/IMintableBurnable.sol';\\r\\n\\r\\ncontract Bridge {\\r\\n  using SafeMath for uint;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct TokenInfo {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    uint8 decimals;\\r\\n    address tokenAddr;\\r\\n    uint price;\\r\\n  }\\r\\n  mapping(address => TokenInfo) public tokenInfo;\\r\\n\\r\\n  mapping(address => uint) private nonces;\\r\\n  mapping(address => mapping(uint => bool)) private processedNonces;\\r\\n  mapping(address => uint) private taxCollected;\\r\\n\\r\\n  address public admin;\\r\\n  uint public fee = 8;\\r\\n  \\r\\n  event Locked(\\r\\n    address token,\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint amount,\\r\\n    uint date,\\r\\n    uint nonce,\\r\\n    bool indexed lock\\r\\n  );\\r\\n\\r\\n  event TokenMinted(\\r\\n    address token,\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint amount,\\r\\n    uint date,\\r\\n    uint nonce,\\r\\n    bool indexed minted\\r\\n  );\\r\\n\\r\\n  event TokenBurn(\\r\\n    address token,\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint amount,\\r\\n    uint date,\\r\\n    uint nonce,\\r\\n    bool indexed burnt\\r\\n  );\\r\\n\\r\\n  event Unlocked(\\r\\n    address token,\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint amount,\\r\\n    uint date,\\r\\n    uint nonce,\\r\\n    bool indexed unlock\\r\\n  );\\r\\n\\r\\n  event NewTokenAdded(\\r\\n    string name,\\r\\n    address source,\\r\\n    address destination\\r\\n  );\\r\\n\\r\\n  event AdminChanged(address oldAdmin, address newAdmin);\\r\\n\\r\\n  modifier onlyAdmin() {\\r\\n    require(msg.sender == admin, \\\"bridge/not-authorized\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    admin = msg.sender;\\r\\n  }\\r\\n\\r\\n  function addToken(address chainA, TokenInfo memory extraArgs) external onlyAdmin {\\r\\n    TokenInfo storage tknInfo = tokenInfo[chainA];\\r\\n    tknInfo.name = extraArgs.name;\\r\\n    tknInfo.symbol = extraArgs.symbol;\\r\\n    tknInfo.decimals = extraArgs.decimals;\\r\\n    tknInfo.tokenAddr = extraArgs.tokenAddr;\\r\\n    tknInfo.price = extraArgs.price;\\r\\n    address chainB = extraArgs.tokenAddr;\\r\\n    emit NewTokenAdded(extraArgs.name, chainA, chainB);\\r\\n  }\\r\\n\\r\\n  function changeAdmin(address newAdmin) external onlyAdmin {\\r\\n    require(newAdmin != address(0), \\\"bridge/new admin cannot be zero address\\\");\\r\\n    address oldAdmin = admin;\\r\\n    admin = newAdmin;\\r\\n    emit AdminChanged(oldAdmin, newAdmin);\\r\\n  }\\r\\n\\r\\n  function setFee(uint value) external onlyAdmin {\\r\\n    fee = value;\\r\\n  }\\r\\n\\r\\n  function withdrawTaxERC20(address token, address to) external onlyAdmin {\\r\\n    TokenInfo storage tknInfo = tokenInfo[token];\\r\\n    require(tknInfo.tokenAddr != address(0), \\\"cannot withdraw\\\");\\r\\n    uint amount = taxCollected[token];\\r\\n    if (amount > 0) {\\r\\n      IERC20(token).safeTransfer(to, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function withdrawTaxETH(address to) external onlyAdmin {\\r\\n    TokenInfo storage tknInfo = tokenInfo[address(0)];\\r\\n    require(tknInfo.tokenAddr != address(0), \\\"cannot withdraw\\\");\\r\\n    uint amount = taxCollected[address(0)];\\r\\n    if (amount > 0) {\\r\\n      (bool sent,) = payable(to).call{value: amount}(\\\"\\\");\\r\\n      require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev lock ETH to be minted on the other chain\\r\\n   * @param recipient address that receives the tokens on the other chain\\r\\n   */\\r\\n  function lockETH(\\r\\n      address recipient\\r\\n  ) external payable {\\r\\n    // map address(0) as ETH to synthetic ETH on the destination chain\\r\\n    TokenInfo storage tknInfo = tokenInfo[address(0)];\\r\\n    require(\\r\\n      recipient != address(0),\\r\\n      \\\"bridge/recipient is a zero address\\\"\\r\\n    );\\r\\n    require (msg.value > 0, \\\"amount should be greater than 0\\\");\\r\\n    require(tknInfo.tokenAddr != address(0), \\\"forbid lock\\\");\\r\\n    nonces[msg.sender] += 1;\\r\\n    uint nonce = nonces[msg.sender];\\r\\n    require(processedNonces[msg.sender][nonce] == false, 'transfer already processed');\\r\\n    processedNonces[msg.sender][nonce] = true;\\r\\n    uint initialAmount = msg.value;\\r\\n    uint tknDecimals = 10 ** 18;\\r\\n    uint x = tknDecimals.div(tknInfo.price);\\r\\n    uint y = fee.mul(x);\\r\\n    uint tax = y.div(10);\\r\\n    uint finalAmount = initialAmount.sub(tax);\\r\\n    taxCollected[address(0)] += tax;\\r\\n    emit Locked(\\r\\n      tknInfo.tokenAddr,\\r\\n      msg.sender,\\r\\n      recipient,\\r\\n      finalAmount,\\r\\n      block.timestamp,\\r\\n      nonce,\\r\\n      true\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev lock tokens to be minted on the other chain\\r\\n   * @param tokenIn is the token contract address on this chain\\r\\n   * @param recipient address that receives the tokens on the other chain\\r\\n   * @param amount amount of tokens to lock\\r\\n   */\\r\\n  function lockToken(\\r\\n      address tokenIn,\\r\\n      address recipient,\\r\\n      uint amount\\r\\n      ) external {\\r\\n      TokenInfo storage tknInfo = tokenInfo[tokenIn];\\r\\n      require(\\r\\n        recipient != address(0),\\r\\n        \\\"bridge/recipient is a zero address\\\"\\r\\n      );\\r\\n      require(amount > 0, \\\"bridge/zero token locked\\\");\\r\\n      require(tknInfo.tokenAddr != address(0), \\\"forbid lock\\\");\\r\\n      nonces[msg.sender] += 1;\\r\\n      uint nonce = nonces[msg.sender];\\r\\n      require(processedNonces[msg.sender][nonce] == false, 'transfer already processed');\\r\\n      processedNonces[msg.sender][nonce] = true;\\r\\n      uint _balanceBefore = IERC20(tokenIn).balanceOf(msg.sender);\\r\\n      IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amount);\\r\\n      uint _balanceAfter = IERC20(tokenIn).balanceOf(msg.sender);\\r\\n      uint _actualAmount = _balanceBefore.sub(_balanceAfter);\\r\\n      uint tknDecimals = 10 ** tknInfo.decimals;\\r\\n      uint x = tknDecimals.div(tknInfo.price);\\r\\n      uint y = fee.mul(x);\\r\\n      uint tax = y.div(10);\\r\\n      uint finalAmount = _actualAmount.sub(tax);\\r\\n      taxCollected[tokenIn] += tax;\\r\\n      emit Locked(\\r\\n        tknInfo.tokenAddr,\\r\\n        msg.sender,\\r\\n        recipient,\\r\\n        finalAmount,\\r\\n        block.timestamp,\\r\\n        nonce,\\r\\n        true\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev mint tokens that were locked on the other chain\\r\\n   * @param tokenOut is the token contract address on this chain\\r\\n   * @param sender address that locked the tokens on the other chain\\r\\n   * @param recipient address that receives the tokens on this chain\\r\\n   * @param amount amount of tokens to mint\\r\\n   */\\r\\n  function mint(\\r\\n    address tokenOut,\\r\\n    address sender, \\r\\n    address recipient, \\r\\n    uint amount\\r\\n    ) external onlyAdmin {\\r\\n    require(\\r\\n      recipient != address(0),\\r\\n      \\\"bridge/recipient is a zero address\\\"\\r\\n    );\\r\\n    require(amount > 0, \\\"bridge/amount should be greater than 0\\\");\\r\\n    nonces[sender] += 1;\\r\\n    uint nonce = nonces[sender];\\r\\n    require(processedNonces[sender][nonce] == false, 'transfer already processed');\\r\\n    processedNonces[sender][nonce] = true;\\r\\n    IMintableBurnable(tokenOut).mint(recipient, amount);\\r\\n    emit TokenMinted(\\r\\n      tokenOut,\\r\\n      sender,\\r\\n      recipient,\\r\\n      amount,\\r\\n      block.timestamp,\\r\\n      nonce,\\r\\n      true\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev burn tokens that were minted on this chain, unlocks on the other chain\\r\\n   * @param tokenIn is the token contract address on this chain\\r\\n   * @param recipient address that receives the tokens on the other chain\\r\\n   * @param amount amount of tokens to burn\\r\\n   */\\r\\n  function burn(\\r\\n    address tokenIn,\\r\\n    address recipient,\\r\\n    uint amount\\r\\n    ) external {\\r\\n      TokenInfo storage tknInfo = tokenInfo[tokenIn];\\r\\n      require(\\r\\n        recipient != address(0),\\r\\n        \\\"bridge/recipient is a zero address\\\"\\r\\n      );\\r\\n      require(amount > 0, \\\"bridge/zero token burnt\\\");\\r\\n      require(tknInfo.tokenAddr != address(0), \\\"forbid burn\\\");\\r\\n      nonces[msg.sender] += 1;\\r\\n      uint nonce = nonces[msg.sender];\\r\\n      require(processedNonces[msg.sender][nonce] == false, 'transfer already processed');\\r\\n      processedNonces[msg.sender][nonce] = true;\\r\\n      uint _balanceBefore = IERC20(tokenIn).balanceOf(msg.sender);\\r\\n      IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amount);\\r\\n      uint _balanceAfter = IERC20(tokenIn).balanceOf(msg.sender);\\r\\n      uint _actualAmount = _balanceBefore.sub(_balanceAfter);\\r\\n      uint tknDecimals = 10 ** tknInfo.decimals;\\r\\n      uint x = tknDecimals.div(tknInfo.price);\\r\\n      uint y = fee.mul(x);\\r\\n      uint tax = y.div(10);\\r\\n      uint finalAmount = _actualAmount.sub(tax);\\r\\n      taxCollected[tokenIn] += tax;\\r\\n      IMintableBurnable(tokenIn).burn(address(this), finalAmount);\\r\\n      emit TokenBurn(\\r\\n        tknInfo.tokenAddr,\\r\\n        msg.sender,\\r\\n        recipient,\\r\\n        finalAmount,\\r\\n        block.timestamp,\\r\\n        nonce,\\r\\n        true\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev unlock ETH after burning them on the other chain\\r\\n   * @param sender is the account that burnt tokens on the other chain\\r\\n   * @param recipient address that receives the unlocked tokens on this chain\\r\\n   * @param amount amount of tokens to unlock\\r\\n   */\\r\\n  function unlockETH(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint amount\\r\\n    ) external onlyAdmin {\\r\\n    require(\\r\\n      recipient != address(0),\\r\\n      \\\"bridge/recipient is a zero address\\\"\\r\\n    );\\r\\n    require(amount > 0, \\\"bridge/amount should be greater than 0\\\");\\r\\n    nonces[sender] += 1;\\r\\n    uint nonce = nonces[sender];\\r\\n    require(processedNonces[sender][nonce] == false, 'transfer already processed');\\r\\n    processedNonces[sender][nonce] = true;\\r\\n    (bool sent,) = payable(recipient).call{value: amount}(\\\"\\\");\\r\\n    require(sent, \\\"Failed to send Ether\\\");\\r\\n    emit Unlocked(\\r\\n      address(0),\\r\\n      sender,\\r\\n      recipient,\\r\\n      amount,\\r\\n      block.timestamp,\\r\\n      nonce,\\r\\n      true\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev unlock tokens after burning them on the other chain\\r\\n   * @param tokenOut is the token contract address on this chain\\r\\n   * @param sender is the account that burnt tokens on the other chain\\r\\n   * @param recipient address that receives the unlocked tokens on this chain\\r\\n   * @param amount amount of tokens to unlock\\r\\n   */\\r\\n  function unlockToken(\\r\\n    address tokenOut,\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint amount\\r\\n    ) external onlyAdmin {\\r\\n    require(\\r\\n      recipient != address(0),\\r\\n      \\\"bridge/recipient is a zero address\\\"\\r\\n    );\\r\\n    require(amount > 0, \\\"bridge/amount should be greater than 0\\\");\\r\\n    nonces[sender] += 1;\\r\\n    uint nonce = nonces[sender];\\r\\n    require(processedNonces[sender][nonce] == false, 'transfer already processed');\\r\\n    processedNonces[sender][nonce] = true;\\r\\n    IERC20(tokenOut).safeTransfer(recipient, amount);\\r\\n    emit Unlocked(\\r\\n      tokenOut,\\r\\n      sender,\\r\\n      recipient,\\r\\n      amount,\\r\\n      block.timestamp,\\r\\n      nonce,\\r\\n      true\\r\\n    );\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xa135e7e64ebe7a4e844dc162a19ee649060ff89c2c64cf7267bfec7e086dbd19\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IMintableBurnable {\\r\\n  function mint(address to, uint amount) external;\\r\\n  function burn(address owner, uint amount) external;\\r\\n}\",\"keccak256\":\"0x8df7265655bec066fa12628f0320fa00158f1e6740866dd4e9e6d108f0e06631\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600860055534801561001557600080fd5b50600480546001600160a01b0319163317905561221d806100376000396000f3fe6080604052600436106100dd5760003560e01c8063940fd3431161007f578063ddca3f4311610059578063ddca3f4314610217578063f5dab71114610240578063f6b911bc14610271578063f851a4401461029157600080fd5b8063940fd343146101b757806396de82b1146101d7578063b0f9cd38146101f757600080fd5b806381513892116100bb578063815138921461014457806384a73e53146101645780638f283970146101775780638fcf69591461019757600080fd5b80631d4347a8146100e25780633fdab6ac1461010457806369fe0e2d14610124575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611b33565b6102c9565b005b34801561011057600080fd5b5061010261011f366004611b6f565b610658565b34801561013057600080fd5b5061010261013f366004611b8a565b6107ec565b34801561015057600080fd5b5061010261015f366004611ba3565b61081b565b610102610172366004611b6f565b6109de565b34801561018357600080fd5b50610102610192366004611b6f565b610c53565b3480156101a357600080fd5b506101026101b2366004611b33565b610d44565b3480156101c357600080fd5b506101026101d2366004611bee565b610f2c565b3480156101e357600080fd5b506101026101f2366004611ced565b610fee565b34801561020357600080fd5b50610102610212366004611ba3565b6110e2565b34801561022357600080fd5b5061022d60055481565b6040519081526020015b60405180910390f35b34801561024c57600080fd5b5061026061025b366004611b6f565b611248565b604051610237959493929190611e20565b34801561027d57600080fd5b5061010261028c366004611b33565b611394565b34801561029d57600080fd5b506004546102b1906001600160a01b031681565b6040516001600160a01b039091168152602001610237565b6001600160a01b03808416600090815260208190526040902090831661030a5760405162461bcd60e51b815260040161030190611e6f565b60405180910390fd5b6000821161035a5760405162461bcd60e51b815260206004820152601860248201527f6272696467652f7a65726f20746f6b656e206c6f636b656400000000000000006044820152606401610301565b600281015461010090046001600160a01b03166103a75760405162461bcd60e51b815260206004820152600b60248201526a666f72626964206c6f636b60a81b6044820152606401610301565b33600090815260016020819052604082208054919290916103c9908490611ec7565b909155505033600090815260016020908152604080832054600283528184208185529092529091205460ff16156104125760405162461bcd60e51b815260040161030190611edf565b336000818152600260209081526040808320858452909152808220805460ff19166001179055516370a0823160e01b81526004810192909252906001600160a01b038716906370a082319060240160206040518083038186803b15801561047857600080fd5b505afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b09190611f16565b90506104c76001600160a01b038716333087611761565b6040516370a0823160e01b81523360048201526000906001600160a01b038816906370a082319060240160206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190611f16565b9050600061054f83836117cc565b60028601549091506000906105689060ff16600a612013565b905060006105838760030154836117e190919063ffffffff16565b9050600061059c826005546117ed90919063ffffffff16565b905060006105ab82600a6117e1565b905060006105b986836117cc565b6001600160a01b038e166000908152600360205260408120805492935084929091906105e6908490611ec7565b92505081905550600115157fb72fc2cbe62c4c789cbaf153fcb9e7fd9a6d42a7e8b21dcbcf8205a48a71f1ac8b60020160019054906101000a90046001600160a01b0316338f85428f60405161064196959493929190612022565b60405180910390a250505050505050505050505050565b6004546001600160a01b031633146106825760405162461bcd60e51b81526004016103019061205b565b60008080526020527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb7547fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb59061010090046001600160a01b031661071a5760405162461bcd60e51b815260206004820152600f60248201526e63616e6e6f7420776974686472617760881b6044820152606401610301565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5480156107e7576000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610798576040519150601f19603f3d011682016040523d82523d6000602084013e61079d565b606091505b50509050806107e55760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610301565b505b505050565b6004546001600160a01b031633146108165760405162461bcd60e51b81526004016103019061205b565b600555565b6004546001600160a01b031633146108455760405162461bcd60e51b81526004016103019061205b565b6001600160a01b03821661086b5760405162461bcd60e51b815260040161030190611e6f565b6000811161088b5760405162461bcd60e51b81526004016103019061208a565b6001600160a01b038316600090815260016020819052604082208054919290916108b6908490611ec7565b90915550506001600160a01b038316600090815260016020908152604080832054600283528184208185529092529091205460ff16156109085760405162461bcd60e51b815260040161030190611edf565b6001600160a01b03848116600090815260026020908152604080832085845290915290819020805460ff19166001179055516340c10f1960e01b8152848216600482015260248101849052908616906340c10f1990604401600060405180830381600087803b15801561097a57600080fd5b505af115801561098e573d6000803e3d6000fd5b50505050600115157fadbf676570b14adc5e745962ac26ae18d3854795058a2a52c0555457eb472ed88686868642876040516109cf96959493929190612022565b60405180910390a25050505050565b60008080526020527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb56001600160a01b038216610a2d5760405162461bcd60e51b815260040161030190611e6f565b60003411610a7d5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606401610301565b600281015461010090046001600160a01b0316610aca5760405162461bcd60e51b815260206004820152600b60248201526a666f72626964206c6f636b60a81b6044820152606401610301565b3360009081526001602081905260408220805491929091610aec908490611ec7565b909155505033600090815260016020908152604080832054600283528184208185529092529091205460ff1615610b355760405162461bcd60e51b815260040161030190611edf565b3360009081526002602090815260408083208484529091528120805460ff1916600117905560038301543491670de0b6b3a764000091610b769083906117e1565b90506000610b8f826005546117ed90919063ffffffff16565b90506000610b9e82600a6117e1565b90506000610bac86836117cc565b600080805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff80549293508492909190610bec908490611ec7565b909155505060028801546040516001917fb72fc2cbe62c4c789cbaf153fcb9e7fd9a6d42a7e8b21dcbcf8205a48a71f1ac91610c409161010090046001600160a01b03169033908e90879042908f90612022565b60405180910390a2505050505050505050565b6004546001600160a01b03163314610c7d5760405162461bcd60e51b81526004016103019061205b565b6001600160a01b038116610ce35760405162461bcd60e51b815260206004820152602760248201527f6272696467652f6e65772061646d696e2063616e6e6f74206265207a65726f206044820152666164647265737360c81b6064820152608401610301565b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a15050565b6004546001600160a01b03163314610d6e5760405162461bcd60e51b81526004016103019061205b565b6001600160a01b038216610d945760405162461bcd60e51b815260040161030190611e6f565b60008111610db45760405162461bcd60e51b81526004016103019061208a565b6001600160a01b03831660009081526001602081905260408220805491929091610ddf908490611ec7565b90915550506001600160a01b038316600090815260016020908152604080832054600283528184208185529092529091205460ff1615610e315760405162461bcd60e51b815260040161030190611edf565b6001600160a01b038481166000908152600260209081526040808320858452909152808220805460ff1916600117905551909185169084908381818185875af1925050503d8060008114610ea1576040519150601f19603f3d011682016040523d82523d6000602084013e610ea6565b606091505b5050905080610eee5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610301565b600115157f0637c6badf7521351486ec407f9a218f17bb71aa3d552e2b9582ad0cd89906ad600087878742886040516109cf96959493929190612022565b6004546001600160a01b03163314610f565760405162461bcd60e51b81526004016103019061205b565b6001600160a01b0380831660009081526020819052604090206002810154909161010090910416610fbb5760405162461bcd60e51b815260206004820152600f60248201526e63616e6e6f7420776974686472617760881b6044820152606401610301565b6001600160a01b03831660009081526003602052604090205480156107e5576107e56001600160a01b03851684836117f9565b6004546001600160a01b031633146110185760405162461bcd60e51b81526004016103019061205b565b6001600160a01b03821660009081526020818152604090912082518051919261104692849290910190611a7e565b50602080830151805161105f9260018501920190611a7e565b50604082810151600283018054606086015160ff9093166001600160a81b0319909116176101006001600160a01b03841602179055608084015160038401558351915190917ffefe3a82e60e454e7f978fed46828a5870b6b533bb3cfc05d454b72e8b6c6e3c916110d49190879085906120d0565b60405180910390a150505050565b6004546001600160a01b0316331461110c5760405162461bcd60e51b81526004016103019061205b565b6001600160a01b0382166111325760405162461bcd60e51b815260040161030190611e6f565b600081116111525760405162461bcd60e51b81526004016103019061208a565b6001600160a01b0383166000908152600160208190526040822080549192909161117d908490611ec7565b90915550506001600160a01b038316600090815260016020908152604080832054600283528184208185529092529091205460ff16156111cf5760405162461bcd60e51b815260040161030190611edf565b6001600160a01b0380851660009081526002602090815260408083208584529091529020805460ff1916600117905561120b90861684846117f9565b600115157f0637c6badf7521351486ec407f9a218f17bb71aa3d552e2b9582ad0cd89906ad8686868642876040516109cf96959493929190612022565b60006020819052908152604090208054819061126390612103565b80601f016020809104026020016040519081016040528092919081815260200182805461128f90612103565b80156112dc5780601f106112b1576101008083540402835291602001916112dc565b820191906000526020600020905b8154815290600101906020018083116112bf57829003601f168201915b5050505050908060010180546112f190612103565b80601f016020809104026020016040519081016040528092919081815260200182805461131d90612103565b801561136a5780601f1061133f5761010080835404028352916020019161136a565b820191906000526020600020905b81548152906001019060200180831161134d57829003601f168201915b505050506002830154600390930154919260ff8116926101009091046001600160a01b0316915085565b6001600160a01b0380841660009081526020819052604090209083166113cc5760405162461bcd60e51b815260040161030190611e6f565b6000821161141c5760405162461bcd60e51b815260206004820152601760248201527f6272696467652f7a65726f20746f6b656e206275726e740000000000000000006044820152606401610301565b600281015461010090046001600160a01b03166114695760405162461bcd60e51b815260206004820152600b60248201526a3337b93134b210313ab93760a91b6044820152606401610301565b336000908152600160208190526040822080549192909161148b908490611ec7565b909155505033600090815260016020908152604080832054600283528184208185529092529091205460ff16156114d45760405162461bcd60e51b815260040161030190611edf565b336000818152600260209081526040808320858452909152808220805460ff19166001179055516370a0823160e01b81526004810192909252906001600160a01b038716906370a082319060240160206040518083038186803b15801561153a57600080fd5b505afa15801561154e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115729190611f16565b90506115896001600160a01b038716333087611761565b6040516370a0823160e01b81523360048201526000906001600160a01b038816906370a082319060240160206040518083038186803b1580156115cb57600080fd5b505afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190611f16565b9050600061161183836117cc565b600286015490915060009061162a9060ff16600a612013565b905060006116458760030154836117e190919063ffffffff16565b9050600061165e826005546117ed90919063ffffffff16565b9050600061166d82600a6117e1565b9050600061167b86836117cc565b6001600160a01b038e166000908152600360205260408120805492935084929091906116a8908490611ec7565b9091555050604051632770a7eb60e21b8152306004820152602481018290526001600160a01b038e1690639dc29fac90604401600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b50505050600115157fd98fbe2cea7a6dc702ed526efcb610ea19aa060ebea85e972859cc13a84b61298b60020160019054906101000a90046001600160a01b0316338f85428f60405161064196959493929190612022565b6040516001600160a01b03808516602483015283166044820152606481018290526107e59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611829565b60006117d8828461213e565b90505b92915050565b60006117d88284612155565b60006117d88284612177565b6040516001600160a01b0383166024820152604481018290526107e790849063a9059cbb60e01b90606401611795565b600061187e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118fb9092919063ffffffff16565b8051909150156107e7578080602001905181019061189c9190612196565b6107e75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610301565b606061190a8484600085611914565b90505b9392505050565b6060824710156119755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610301565b6001600160a01b0385163b6119cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610301565b600080866001600160a01b031685876040516119e891906121b8565b60006040518083038185875af1925050503d8060008114611a25576040519150601f19603f3d011682016040523d82523d6000602084013e611a2a565b606091505b5091509150611a3a828286611a45565b979650505050505050565b60608315611a5457508161190d565b825115611a645782518084602001fd5b8160405162461bcd60e51b815260040161030191906121d4565b828054611a8a90612103565b90600052602060002090601f016020900481019282611aac5760008555611af2565b82601f10611ac557805160ff1916838001178555611af2565b82800160010185558215611af2579182015b82811115611af2578251825591602001919060010190611ad7565b50611afe929150611b02565b5090565b5b80821115611afe5760008155600101611b03565b80356001600160a01b0381168114611b2e57600080fd5b919050565b600080600060608486031215611b4857600080fd5b611b5184611b17565b9250611b5f60208501611b17565b9150604084013590509250925092565b600060208284031215611b8157600080fd5b6117d882611b17565b600060208284031215611b9c57600080fd5b5035919050565b60008060008060808587031215611bb957600080fd5b611bc285611b17565b9350611bd060208601611b17565b9250611bde60408601611b17565b9396929550929360600135925050565b60008060408385031215611c0157600080fd5b611c0a83611b17565b9150611c1860208401611b17565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611c5a57611c5a611c21565b60405290565b600082601f830112611c7157600080fd5b813567ffffffffffffffff80821115611c8c57611c8c611c21565b604051601f8301601f19908116603f01168101908282118183101715611cb457611cb4611c21565b81604052838152866020858801011115611ccd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611d0057600080fd5b611d0983611b17565b9150602083013567ffffffffffffffff80821115611d2657600080fd5b9084019060a08287031215611d3a57600080fd5b611d42611c37565b823582811115611d5157600080fd5b611d5d88828601611c60565b825250602083013582811115611d7257600080fd5b611d7e88828601611c60565b6020830152506040830135915060ff82168214611d9a57600080fd5b816040820152611dac60608401611b17565b6060820152608083013560808201528093505050509250929050565b60005b83811015611de3578181015183820152602001611dcb565b838111156107e55750506000910152565b60008151808452611e0c816020860160208601611dc8565b601f01601f19169290920160200192915050565b60a081526000611e3360a0830188611df4565b8281036020840152611e458188611df4565b60ff96909616604084015250506001600160a01b0392909216606083015260809091015292915050565b60208082526022908201527f6272696467652f726563697069656e742069732061207a65726f206164647265604082015261737360f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611eda57611eda611eb1565b500190565b6020808252601a908201527f7472616e7366657220616c72656164792070726f636573736564000000000000604082015260600190565b600060208284031215611f2857600080fd5b5051919050565b600181815b80851115611f6a578160001904821115611f5057611f50611eb1565b80851615611f5d57918102915b93841c9390800290611f34565b509250929050565b600082611f81575060016117db565b81611f8e575060006117db565b8160018114611fa45760028114611fae57611fca565b60019150506117db565b60ff841115611fbf57611fbf611eb1565b50506001821b6117db565b5060208310610133831016604e8410600b8410161715611fed575081810a6117db565b611ff78383611f2f565b806000190482111561200b5761200b611eb1565b029392505050565b60006117d860ff841683611f72565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925260a081019190915260c00190565b602080825260159082015274189c9a5919d94bdb9bdd0b585d5d1a1bdc9a5e9959605a1b604082015260600190565b60208082526026908201527f6272696467652f616d6f756e742073686f756c6420626520677265617465722060408201526507468616e20360d41b606082015260800190565b6060815260006120e36060830186611df4565b6001600160a01b0394851660208401529290931660409091015292915050565b600181811c9082168061211757607f821691505b6020821081141561213857634e487b7160e01b600052602260045260246000fd5b50919050565b60008282101561215057612150611eb1565b500390565b60008261217257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561219157612191611eb1565b500290565b6000602082840312156121a857600080fd5b8151801515811461190d57600080fd5b600082516121ca818460208701611dc8565b9190910192915050565b6020815260006117d86020830184611df456fea26469706673582212202432846e8d019c8a93ee3b435daf7cf42bd655e550d7235bc97680acee014a5364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063940fd3431161007f578063ddca3f4311610059578063ddca3f4314610217578063f5dab71114610240578063f6b911bc14610271578063f851a4401461029157600080fd5b8063940fd343146101b757806396de82b1146101d7578063b0f9cd38146101f757600080fd5b806381513892116100bb578063815138921461014457806384a73e53146101645780638f283970146101775780638fcf69591461019757600080fd5b80631d4347a8146100e25780633fdab6ac1461010457806369fe0e2d14610124575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611b33565b6102c9565b005b34801561011057600080fd5b5061010261011f366004611b6f565b610658565b34801561013057600080fd5b5061010261013f366004611b8a565b6107ec565b34801561015057600080fd5b5061010261015f366004611ba3565b61081b565b610102610172366004611b6f565b6109de565b34801561018357600080fd5b50610102610192366004611b6f565b610c53565b3480156101a357600080fd5b506101026101b2366004611b33565b610d44565b3480156101c357600080fd5b506101026101d2366004611bee565b610f2c565b3480156101e357600080fd5b506101026101f2366004611ced565b610fee565b34801561020357600080fd5b50610102610212366004611ba3565b6110e2565b34801561022357600080fd5b5061022d60055481565b6040519081526020015b60405180910390f35b34801561024c57600080fd5b5061026061025b366004611b6f565b611248565b604051610237959493929190611e20565b34801561027d57600080fd5b5061010261028c366004611b33565b611394565b34801561029d57600080fd5b506004546102b1906001600160a01b031681565b6040516001600160a01b039091168152602001610237565b6001600160a01b03808416600090815260208190526040902090831661030a5760405162461bcd60e51b815260040161030190611e6f565b60405180910390fd5b6000821161035a5760405162461bcd60e51b815260206004820152601860248201527f6272696467652f7a65726f20746f6b656e206c6f636b656400000000000000006044820152606401610301565b600281015461010090046001600160a01b03166103a75760405162461bcd60e51b815260206004820152600b60248201526a666f72626964206c6f636b60a81b6044820152606401610301565b33600090815260016020819052604082208054919290916103c9908490611ec7565b909155505033600090815260016020908152604080832054600283528184208185529092529091205460ff16156104125760405162461bcd60e51b815260040161030190611edf565b336000818152600260209081526040808320858452909152808220805460ff19166001179055516370a0823160e01b81526004810192909252906001600160a01b038716906370a082319060240160206040518083038186803b15801561047857600080fd5b505afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b09190611f16565b90506104c76001600160a01b038716333087611761565b6040516370a0823160e01b81523360048201526000906001600160a01b038816906370a082319060240160206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190611f16565b9050600061054f83836117cc565b60028601549091506000906105689060ff16600a612013565b905060006105838760030154836117e190919063ffffffff16565b9050600061059c826005546117ed90919063ffffffff16565b905060006105ab82600a6117e1565b905060006105b986836117cc565b6001600160a01b038e166000908152600360205260408120805492935084929091906105e6908490611ec7565b92505081905550600115157fb72fc2cbe62c4c789cbaf153fcb9e7fd9a6d42a7e8b21dcbcf8205a48a71f1ac8b60020160019054906101000a90046001600160a01b0316338f85428f60405161064196959493929190612022565b60405180910390a250505050505050505050505050565b6004546001600160a01b031633146106825760405162461bcd60e51b81526004016103019061205b565b60008080526020527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb7547fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb59061010090046001600160a01b031661071a5760405162461bcd60e51b815260206004820152600f60248201526e63616e6e6f7420776974686472617760881b6044820152606401610301565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5480156107e7576000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610798576040519150601f19603f3d011682016040523d82523d6000602084013e61079d565b606091505b50509050806107e55760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610301565b505b505050565b6004546001600160a01b031633146108165760405162461bcd60e51b81526004016103019061205b565b600555565b6004546001600160a01b031633146108455760405162461bcd60e51b81526004016103019061205b565b6001600160a01b03821661086b5760405162461bcd60e51b815260040161030190611e6f565b6000811161088b5760405162461bcd60e51b81526004016103019061208a565b6001600160a01b038316600090815260016020819052604082208054919290916108b6908490611ec7565b90915550506001600160a01b038316600090815260016020908152604080832054600283528184208185529092529091205460ff16156109085760405162461bcd60e51b815260040161030190611edf565b6001600160a01b03848116600090815260026020908152604080832085845290915290819020805460ff19166001179055516340c10f1960e01b8152848216600482015260248101849052908616906340c10f1990604401600060405180830381600087803b15801561097a57600080fd5b505af115801561098e573d6000803e3d6000fd5b50505050600115157fadbf676570b14adc5e745962ac26ae18d3854795058a2a52c0555457eb472ed88686868642876040516109cf96959493929190612022565b60405180910390a25050505050565b60008080526020527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb56001600160a01b038216610a2d5760405162461bcd60e51b815260040161030190611e6f565b60003411610a7d5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606401610301565b600281015461010090046001600160a01b0316610aca5760405162461bcd60e51b815260206004820152600b60248201526a666f72626964206c6f636b60a81b6044820152606401610301565b3360009081526001602081905260408220805491929091610aec908490611ec7565b909155505033600090815260016020908152604080832054600283528184208185529092529091205460ff1615610b355760405162461bcd60e51b815260040161030190611edf565b3360009081526002602090815260408083208484529091528120805460ff1916600117905560038301543491670de0b6b3a764000091610b769083906117e1565b90506000610b8f826005546117ed90919063ffffffff16565b90506000610b9e82600a6117e1565b90506000610bac86836117cc565b600080805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff80549293508492909190610bec908490611ec7565b909155505060028801546040516001917fb72fc2cbe62c4c789cbaf153fcb9e7fd9a6d42a7e8b21dcbcf8205a48a71f1ac91610c409161010090046001600160a01b03169033908e90879042908f90612022565b60405180910390a2505050505050505050565b6004546001600160a01b03163314610c7d5760405162461bcd60e51b81526004016103019061205b565b6001600160a01b038116610ce35760405162461bcd60e51b815260206004820152602760248201527f6272696467652f6e65772061646d696e2063616e6e6f74206265207a65726f206044820152666164647265737360c81b6064820152608401610301565b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a15050565b6004546001600160a01b03163314610d6e5760405162461bcd60e51b81526004016103019061205b565b6001600160a01b038216610d945760405162461bcd60e51b815260040161030190611e6f565b60008111610db45760405162461bcd60e51b81526004016103019061208a565b6001600160a01b03831660009081526001602081905260408220805491929091610ddf908490611ec7565b90915550506001600160a01b038316600090815260016020908152604080832054600283528184208185529092529091205460ff1615610e315760405162461bcd60e51b815260040161030190611edf565b6001600160a01b038481166000908152600260209081526040808320858452909152808220805460ff1916600117905551909185169084908381818185875af1925050503d8060008114610ea1576040519150601f19603f3d011682016040523d82523d6000602084013e610ea6565b606091505b5050905080610eee5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610301565b600115157f0637c6badf7521351486ec407f9a218f17bb71aa3d552e2b9582ad0cd89906ad600087878742886040516109cf96959493929190612022565b6004546001600160a01b03163314610f565760405162461bcd60e51b81526004016103019061205b565b6001600160a01b0380831660009081526020819052604090206002810154909161010090910416610fbb5760405162461bcd60e51b815260206004820152600f60248201526e63616e6e6f7420776974686472617760881b6044820152606401610301565b6001600160a01b03831660009081526003602052604090205480156107e5576107e56001600160a01b03851684836117f9565b6004546001600160a01b031633146110185760405162461bcd60e51b81526004016103019061205b565b6001600160a01b03821660009081526020818152604090912082518051919261104692849290910190611a7e565b50602080830151805161105f9260018501920190611a7e565b50604082810151600283018054606086015160ff9093166001600160a81b0319909116176101006001600160a01b03841602179055608084015160038401558351915190917ffefe3a82e60e454e7f978fed46828a5870b6b533bb3cfc05d454b72e8b6c6e3c916110d49190879085906120d0565b60405180910390a150505050565b6004546001600160a01b0316331461110c5760405162461bcd60e51b81526004016103019061205b565b6001600160a01b0382166111325760405162461bcd60e51b815260040161030190611e6f565b600081116111525760405162461bcd60e51b81526004016103019061208a565b6001600160a01b0383166000908152600160208190526040822080549192909161117d908490611ec7565b90915550506001600160a01b038316600090815260016020908152604080832054600283528184208185529092529091205460ff16156111cf5760405162461bcd60e51b815260040161030190611edf565b6001600160a01b0380851660009081526002602090815260408083208584529091529020805460ff1916600117905561120b90861684846117f9565b600115157f0637c6badf7521351486ec407f9a218f17bb71aa3d552e2b9582ad0cd89906ad8686868642876040516109cf96959493929190612022565b60006020819052908152604090208054819061126390612103565b80601f016020809104026020016040519081016040528092919081815260200182805461128f90612103565b80156112dc5780601f106112b1576101008083540402835291602001916112dc565b820191906000526020600020905b8154815290600101906020018083116112bf57829003601f168201915b5050505050908060010180546112f190612103565b80601f016020809104026020016040519081016040528092919081815260200182805461131d90612103565b801561136a5780601f1061133f5761010080835404028352916020019161136a565b820191906000526020600020905b81548152906001019060200180831161134d57829003601f168201915b505050506002830154600390930154919260ff8116926101009091046001600160a01b0316915085565b6001600160a01b0380841660009081526020819052604090209083166113cc5760405162461bcd60e51b815260040161030190611e6f565b6000821161141c5760405162461bcd60e51b815260206004820152601760248201527f6272696467652f7a65726f20746f6b656e206275726e740000000000000000006044820152606401610301565b600281015461010090046001600160a01b03166114695760405162461bcd60e51b815260206004820152600b60248201526a3337b93134b210313ab93760a91b6044820152606401610301565b336000908152600160208190526040822080549192909161148b908490611ec7565b909155505033600090815260016020908152604080832054600283528184208185529092529091205460ff16156114d45760405162461bcd60e51b815260040161030190611edf565b336000818152600260209081526040808320858452909152808220805460ff19166001179055516370a0823160e01b81526004810192909252906001600160a01b038716906370a082319060240160206040518083038186803b15801561153a57600080fd5b505afa15801561154e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115729190611f16565b90506115896001600160a01b038716333087611761565b6040516370a0823160e01b81523360048201526000906001600160a01b038816906370a082319060240160206040518083038186803b1580156115cb57600080fd5b505afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190611f16565b9050600061161183836117cc565b600286015490915060009061162a9060ff16600a612013565b905060006116458760030154836117e190919063ffffffff16565b9050600061165e826005546117ed90919063ffffffff16565b9050600061166d82600a6117e1565b9050600061167b86836117cc565b6001600160a01b038e166000908152600360205260408120805492935084929091906116a8908490611ec7565b9091555050604051632770a7eb60e21b8152306004820152602481018290526001600160a01b038e1690639dc29fac90604401600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b50505050600115157fd98fbe2cea7a6dc702ed526efcb610ea19aa060ebea85e972859cc13a84b61298b60020160019054906101000a90046001600160a01b0316338f85428f60405161064196959493929190612022565b6040516001600160a01b03808516602483015283166044820152606481018290526107e59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611829565b60006117d8828461213e565b90505b92915050565b60006117d88284612155565b60006117d88284612177565b6040516001600160a01b0383166024820152604481018290526107e790849063a9059cbb60e01b90606401611795565b600061187e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118fb9092919063ffffffff16565b8051909150156107e7578080602001905181019061189c9190612196565b6107e75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610301565b606061190a8484600085611914565b90505b9392505050565b6060824710156119755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610301565b6001600160a01b0385163b6119cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610301565b600080866001600160a01b031685876040516119e891906121b8565b60006040518083038185875af1925050503d8060008114611a25576040519150601f19603f3d011682016040523d82523d6000602084013e611a2a565b606091505b5091509150611a3a828286611a45565b979650505050505050565b60608315611a5457508161190d565b825115611a645782518084602001fd5b8160405162461bcd60e51b815260040161030191906121d4565b828054611a8a90612103565b90600052602060002090601f016020900481019282611aac5760008555611af2565b82601f10611ac557805160ff1916838001178555611af2565b82800160010185558215611af2579182015b82811115611af2578251825591602001919060010190611ad7565b50611afe929150611b02565b5090565b5b80821115611afe5760008155600101611b03565b80356001600160a01b0381168114611b2e57600080fd5b919050565b600080600060608486031215611b4857600080fd5b611b5184611b17565b9250611b5f60208501611b17565b9150604084013590509250925092565b600060208284031215611b8157600080fd5b6117d882611b17565b600060208284031215611b9c57600080fd5b5035919050565b60008060008060808587031215611bb957600080fd5b611bc285611b17565b9350611bd060208601611b17565b9250611bde60408601611b17565b9396929550929360600135925050565b60008060408385031215611c0157600080fd5b611c0a83611b17565b9150611c1860208401611b17565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611c5a57611c5a611c21565b60405290565b600082601f830112611c7157600080fd5b813567ffffffffffffffff80821115611c8c57611c8c611c21565b604051601f8301601f19908116603f01168101908282118183101715611cb457611cb4611c21565b81604052838152866020858801011115611ccd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611d0057600080fd5b611d0983611b17565b9150602083013567ffffffffffffffff80821115611d2657600080fd5b9084019060a08287031215611d3a57600080fd5b611d42611c37565b823582811115611d5157600080fd5b611d5d88828601611c60565b825250602083013582811115611d7257600080fd5b611d7e88828601611c60565b6020830152506040830135915060ff82168214611d9a57600080fd5b816040820152611dac60608401611b17565b6060820152608083013560808201528093505050509250929050565b60005b83811015611de3578181015183820152602001611dcb565b838111156107e55750506000910152565b60008151808452611e0c816020860160208601611dc8565b601f01601f19169290920160200192915050565b60a081526000611e3360a0830188611df4565b8281036020840152611e458188611df4565b60ff96909616604084015250506001600160a01b0392909216606083015260809091015292915050565b60208082526022908201527f6272696467652f726563697069656e742069732061207a65726f206164647265604082015261737360f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611eda57611eda611eb1565b500190565b6020808252601a908201527f7472616e7366657220616c72656164792070726f636573736564000000000000604082015260600190565b600060208284031215611f2857600080fd5b5051919050565b600181815b80851115611f6a578160001904821115611f5057611f50611eb1565b80851615611f5d57918102915b93841c9390800290611f34565b509250929050565b600082611f81575060016117db565b81611f8e575060006117db565b8160018114611fa45760028114611fae57611fca565b60019150506117db565b60ff841115611fbf57611fbf611eb1565b50506001821b6117db565b5060208310610133831016604e8410600b8410161715611fed575081810a6117db565b611ff78383611f2f565b806000190482111561200b5761200b611eb1565b029392505050565b60006117d860ff841683611f72565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925260a081019190915260c00190565b602080825260159082015274189c9a5919d94bdb9bdd0b585d5d1a1bdc9a5e9959605a1b604082015260600190565b60208082526026908201527f6272696467652f616d6f756e742073686f756c6420626520677265617465722060408201526507468616e20360d41b606082015260800190565b6060815260006120e36060830186611df4565b6001600160a01b0394851660208401529290931660409091015292915050565b600181811c9082168061211757607f821691505b6020821081141561213857634e487b7160e01b600052602260045260246000fd5b50919050565b60008282101561215057612150611eb1565b500390565b60008261217257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561219157612191611eb1565b500290565b6000602082840312156121a857600080fd5b8151801515811461190d57600080fd5b600082516121ca818460208701611dc8565b9190910192915050565b6020815260006117d86020830184611df456fea26469706673582212202432846e8d019c8a93ee3b435daf7cf42bd655e550d7235bc97680acee014a5364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(address,address,uint256)": {
        "details": "burn tokens that were minted on this chain, unlocks on the other chain",
        "params": {
          "amount": "amount of tokens to burn",
          "recipient": "address that receives the tokens on the other chain",
          "tokenIn": "is the token contract address on this chain"
        }
      },
      "lockETH(address)": {
        "details": "lock ETH to be minted on the other chain",
        "params": {
          "recipient": "address that receives the tokens on the other chain"
        }
      },
      "lockToken(address,address,uint256)": {
        "details": "lock tokens to be minted on the other chain",
        "params": {
          "amount": "amount of tokens to lock",
          "recipient": "address that receives the tokens on the other chain",
          "tokenIn": "is the token contract address on this chain"
        }
      },
      "mint(address,address,address,uint256)": {
        "details": "mint tokens that were locked on the other chain",
        "params": {
          "amount": "amount of tokens to mint",
          "recipient": "address that receives the tokens on this chain",
          "sender": "address that locked the tokens on the other chain",
          "tokenOut": "is the token contract address on this chain"
        }
      },
      "unlockETH(address,address,uint256)": {
        "details": "unlock ETH after burning them on the other chain",
        "params": {
          "amount": "amount of tokens to unlock",
          "recipient": "address that receives the unlocked tokens on this chain",
          "sender": "is the account that burnt tokens on the other chain"
        }
      },
      "unlockToken(address,address,address,uint256)": {
        "details": "unlock tokens after burning them on the other chain",
        "params": {
          "amount": "amount of tokens to unlock",
          "recipient": "address that receives the unlocked tokens on this chain",
          "sender": "is the account that burnt tokens on the other chain",
          "tokenOut": "is the token contract address on this chain"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8203,
        "contract": "contracts/bridge/base/Bridge.sol:Bridge",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(TokenInfo)8198_storage)"
      },
      {
        "astId": 8207,
        "contract": "contracts/bridge/base/Bridge.sol:Bridge",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8213,
        "contract": "contracts/bridge/base/Bridge.sol:Bridge",
        "label": "processedNonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 8217,
        "contract": "contracts/bridge/base/Bridge.sol:Bridge",
        "label": "taxCollected",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8219,
        "contract": "contracts/bridge/base/Bridge.sol:Bridge",
        "label": "admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8222,
        "contract": "contracts/bridge/base/Bridge.sol:Bridge",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(TokenInfo)8198_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bridge.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)8198_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenInfo)8198_storage": {
        "encoding": "inplace",
        "label": "struct Bridge.TokenInfo",
        "members": [
          {
            "astId": 8189,
            "contract": "contracts/bridge/base/Bridge.sol:Bridge",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8191,
            "contract": "contracts/bridge/base/Bridge.sol:Bridge",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8193,
            "contract": "contracts/bridge/base/Bridge.sol:Bridge",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 8195,
            "contract": "contracts/bridge/base/Bridge.sol:Bridge",
            "label": "tokenAddr",
            "offset": 1,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8197,
            "contract": "contracts/bridge/base/Bridge.sol:Bridge",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
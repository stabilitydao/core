{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x844F21b253eDC0dAADfEc67819Fc3513D19A95CB",
      "txHash": "0x30a703b91e9f65f731b1e564e137effc761c2d8a97cc940ffe7a208fb751455e",
      "kind": "uups"
    },
    {
      "address": "0x6376FF1635A01A5b206C65206D0B444668b85B11",
      "txHash": "0xfb18a800546cd79e7511f049c1bf4ea37e7f2d6ecc74e807b76d57343fa55e55",
      "kind": "uups"
    },
    {
      "address": "0xdC9Bd2dA71f0F5b0d7a939315d1BeC1824d352Fc",
      "txHash": "0x16336efc31fc1a7634e3ad948ece76077c08deb2b516b44f6de10cfe242ca9bb",
      "kind": "uups"
    },
    {
      "address": "0xAA7610ea08cAc2A1B24350282Ff8960FBd1519e5",
      "txHash": "0x38b8ee5dcbd67772d8fc39d5b3b4ae61b6153c1601648848f7e073c09f6e014b",
      "kind": "uups"
    },
    {
      "address": "0x95E916Cdd38Af7ad8860C4cC327954a469999B12",
      "txHash": "0x2446f50a34e8a71fb89032b90b00fd1e9818c1c77a172dd6da24a2306bc1df66",
      "kind": "uups"
    },
    {
      "address": "0x964f21Ed7D52aa183814c359de6547173F5B9EDE",
      "txHash": "0xdea067a706689c6a5fe684a6d946313eb5613c0f99c54e577bab28c68421a10a",
      "kind": "uups"
    },
    {
      "address": "0x421e9dE37177b4f803B2f236A33C27ef57173d7c",
      "txHash": "0x28b2079c063e26116c5fd0ad9084297b8e4ea9991611431a3a9dc02c845da46d",
      "kind": "uups"
    }
  ],
  "impls": {
    "3debd7808db1c68650543d9d4d1bc96dbab16a446f3598c389d80ecaa6c49747": {
      "address": "0xBD59927B1bcCe6bd71DB5f58E116F9a68514bEf8",
      "txHash": "0xad310dc1e995d70b21c0b0ffc086dcbdc2a42b5890e91139b084b3ee1a57cf00",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_accountBalanceSnapshots",
            "type": "t_mapping(t_address,t_struct(Snapshots)5586_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20SnapshotUpgradeable.sol:62"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_totalSupplySnapshots",
            "type": "t_struct(Snapshots)5586_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20SnapshotUpgradeable.sol:63"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_currentSnapshotId",
            "type": "t_struct(Counter)9154_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20SnapshotUpgradeable.sol:66"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20SnapshotUpgradeable.sol:207"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)9154_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(Counter)9154_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)9154_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(Snapshots)5586_storage)": {
            "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"
          },
          "t_struct(Snapshots)5586_storage": {
            "label": "struct ERC20SnapshotUpgradeable.Snapshots",
            "members": [
              {
                "label": "ids",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "d3b28000243df0808f12d3c50b7a45ea1822564414b602d762c201ca4ee25f78": {
      "address": "0x483Cb996415ECc36E6551Da63F3FaDd56D0831FC",
      "txHash": "0xca9c2be83dc4fb3ba485bbbee0d0d528411d186ff2ff1d489a0f5a6bcdcf1047",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "contract": "MintingPool",
            "label": "stakeToken",
            "type": "t_contract(IERC20Upgradeable)5484",
            "src": "contracts\\pool\\MintingPool.sol:21"
          },
          {
            "contract": "MintingPool",
            "label": "rewardToken",
            "type": "t_contract(IERC20Mintable)22712",
            "src": "contracts\\pool\\MintingPool.sol:24"
          },
          {
            "contract": "MintingPool",
            "label": "rewardTokensPerBlock",
            "type": "t_uint256",
            "src": "contracts\\pool\\MintingPool.sol:27"
          },
          {
            "contract": "MintingPool",
            "label": "lastRewardBlock",
            "type": "t_uint256",
            "src": "contracts\\pool\\MintingPool.sol:30"
          },
          {
            "contract": "MintingPool",
            "label": "accRewardTokensPerShare",
            "type": "t_uint256",
            "src": "contracts\\pool\\MintingPool.sol:33"
          },
          {
            "contract": "MintingPool",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_struct(UserInfo)22752_storage)",
            "src": "contracts\\pool\\MintingPool.sol:36"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)5484": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IERC20Mintable)22712": {
            "label": "contract IERC20Mintable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserInfo)22752_storage)": {
            "label": "mapping(address => struct IPool.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)22752_storage": {
            "label": "struct IPool.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "52212fdc7a31a7ff9cdf3320ec50e06e469dff71c1b3bda7360b5049b45539fd": {
      "address": "0xB9ECCc753e4B7aE2084e1D8b0b55AE45D96Cb9Dc",
      "txHash": "0xcba0344f4e3e14a9189e9ef69667acfe844d0602f5fe4203362621613181d9a5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "contract": "DividendPayer",
            "label": "_received",
            "type": "t_array(t_struct(Received)24384_storage)dyn_storage",
            "src": "contracts\\payer\\DividendPayer.sol:40"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceivedFrom",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\payer\\DividendPayer.sol:41"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceived",
            "type": "t_uint256",
            "src": "contracts\\payer\\DividendPayer.sol:42"
          },
          {
            "contract": "DividendPayer",
            "label": "_payments",
            "type": "t_mapping(t_address,t_array(t_struct(Payment)24391_storage)dyn_storage)",
            "src": "contracts\\payer\\DividendPayer.sol:44"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaidTo",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\payer\\DividendPayer.sol:45"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaid",
            "type": "t_uint256",
            "src": "contracts\\payer\\DividendPayer.sol:47"
          },
          {
            "contract": "DividendPayer",
            "label": "_sharesToken",
            "type": "t_contract(DividendToken)28066",
            "src": "contracts\\payer\\DividendPayer.sol:49"
          },
          {
            "contract": "DividendPayer",
            "label": "_paymentToken",
            "type": "t_contract(ERC20Upgradeable)5406",
            "src": "contracts\\payer\\DividendPayer.sol:50"
          }
        ],
        "types": {
          "t_array(t_struct(Received)24384_storage)dyn_storage": {
            "label": "struct DividendPayer.Received[]"
          },
          "t_struct(Received)24384_storage": {
            "label": "struct DividendPayer.Received",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "from",
                "type": "t_address"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_struct(Payment)24391_storage)dyn_storage)": {
            "label": "mapping(address => struct DividendPayer.Payment[])"
          },
          "t_array(t_struct(Payment)24391_storage)dyn_storage": {
            "label": "struct DividendPayer.Payment[]"
          },
          "t_struct(Payment)24391_storage": {
            "label": "struct DividendPayer.Payment",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "to",
                "type": "t_address"
              }
            ]
          },
          "t_contract(DividendToken)28066": {
            "label": "contract DividendToken"
          },
          "t_contract(ERC20Upgradeable)5406": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "2dc0aed907292655703e0ccf9e0369f96b63dda7d4b01a44899bda4a4e656b27": {
      "address": "0x5CC04e3AF99bb4A3FA1Ff87aD23B7c0CA1F02811",
      "txHash": "0xf00b0d6901855e1be358e4fa9450beb7a408c18567a031c44a4eeee2fa265905",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "IGovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
          },
          {
            "contract": "IGovernorTimelockUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_proposals",
            "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingDelay",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingPeriod",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_proposalThreshold",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "_proposalVotes",
            "type": "t_mapping(t_uint256,t_struct(ProposalVote)2504_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorCountingSimpleUpgradeable.sol:36"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorCountingSimpleUpgradeable.sol:118"
          },
          {
            "contract": "GovVotes",
            "label": "VOTES_BASE_MULTIPLIER",
            "type": "t_uint64",
            "src": "contracts\\governance\\GovVotes.sol:30"
          },
          {
            "contract": "GovVotes",
            "label": "govFT",
            "type": "t_array(t_struct(GovFT)22221_storage)dyn_storage",
            "src": "contracts\\governance\\GovVotes.sol:32"
          },
          {
            "contract": "GovVotes",
            "label": "govNFT",
            "type": "t_array(t_struct(GovNFT)22229_storage)dyn_storage",
            "src": "contracts\\governance\\GovVotes.sol:33"
          },
          {
            "contract": "GovVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts\\governance\\GovVotes.sol:91"
          },
          {
            "contract": "GovVotesQuorumFraction",
            "label": "_quorumNumerator",
            "type": "t_uint256",
            "src": "contracts\\governance\\GovVotesQuorumFraction.sol:18"
          },
          {
            "contract": "GovVotesQuorumFraction",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts\\governance\\GovVotesQuorumFraction.sol:73"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelock",
            "type": "t_contract(TimelockControllerUpgradeable)2468",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelockIds",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
          },
          {
            "contract": "GovernorPreventLateQuorumUpgradeable",
            "label": "_voteExtension",
            "type": "t_uint64",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorPreventLateQuorumUpgradeable.sol:25"
          },
          {
            "contract": "GovernorPreventLateQuorumUpgradeable",
            "label": "_extendedDeadlines",
            "type": "t_mapping(t_uint256,t_struct(BlockNumber)9596_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorPreventLateQuorumUpgradeable.sol:26"
          },
          {
            "contract": "GovernorPreventLateQuorumUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorPreventLateQuorumUpgradeable.sol:118"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_uint256,t_struct(BlockNumber)9596_storage)": {
            "label": "mapping(uint256 => struct TimersUpgradeable.BlockNumber)"
          },
          "t_struct(BlockNumber)9596_storage": {
            "label": "struct TimersUpgradeable.BlockNumber",
            "members": [
              {
                "label": "_deadline",
                "type": "t_uint64"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_contract(TimelockControllerUpgradeable)2468": {
            "label": "contract TimelockControllerUpgradeable"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_array(t_struct(GovFT)22221_storage)dyn_storage": {
            "label": "struct GovVotes.GovFT[]"
          },
          "t_struct(GovFT)22221_storage": {
            "label": "struct GovVotes.GovFT",
            "members": [
              {
                "label": "token",
                "type": "t_contract(ERC20VotesUpgradeable)6553"
              },
              {
                "label": "multiplier",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(ERC20VotesUpgradeable)6553": {
            "label": "contract ERC20VotesUpgradeable"
          },
          "t_array(t_struct(GovNFT)22229_storage)dyn_storage": {
            "label": "struct GovVotes.GovNFT[]"
          },
          "t_struct(GovNFT)22229_storage": {
            "label": "struct GovVotes.GovNFT",
            "members": [
              {
                "label": "token",
                "type": "t_contract(ERC721VotesUpgradeable)8544"
              },
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "noQuorum",
                "type": "t_bool"
              }
            ]
          },
          "t_contract(ERC721VotesUpgradeable)8544": {
            "label": "contract ERC721VotesUpgradeable"
          },
          "t_mapping(t_uint256,t_struct(ProposalVote)2504_storage)": {
            "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)"
          },
          "t_struct(ProposalVote)2504_storage": {
            "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
            "members": [
              {
                "label": "againstVotes",
                "type": "t_uint256"
              },
              {
                "label": "forVotes",
                "type": "t_uint256"
              },
              {
                "label": "abstainVotes",
                "type": "t_uint256"
              },
              {
                "label": "hasVoted",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
            "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
          },
          "t_struct(ProposalCore)570_storage": {
            "label": "struct GovernorUpgradeable.ProposalCore",
            "members": [
              {
                "label": "voteStart",
                "type": "t_struct(BlockNumber)9596_storage"
              },
              {
                "label": "voteEnd",
                "type": "t_struct(BlockNumber)9596_storage"
              },
              {
                "label": "executed",
                "type": "t_bool"
              },
              {
                "label": "canceled",
                "type": "t_bool"
              }
            ]
          }
        }
      }
    },
    "93f8725b18702235201b6c0ce8b42d81bd146932a447538bdeccb1934f72dc98": {
      "address": "0xfe1d40F29177447F77baA5Bd84f45773a4412b77",
      "txHash": "0xf84ee8bec664a0759f5cd0a900e2330c7df0f66a6d05152a405250f23ba337cc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:458"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_delegation",
            "type": "t_mapping(t_address,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\VotesUpgradeable.sol:44"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_delegateCheckpoints",
            "type": "t_mapping(t_address,t_struct(History)8887_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\VotesUpgradeable.sol:45"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_totalCheckpoints",
            "type": "t_struct(History)8887_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\VotesUpgradeable.sol:46"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)9154_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\VotesUpgradeable.sol:48"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\VotesUpgradeable.sol:223"
          },
          {
            "contract": "ERC721VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\draft-ERC721VotesUpgradeable.sol:52"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ProfitMaker",
            "label": "profitToken",
            "type": "t_contract(IERC20Upgradeable)5484",
            "src": "contracts\\token\\ProfitMaker.sol:21"
          },
          {
            "contract": "ProfitMaker",
            "label": "mintingStart",
            "type": "t_uint64",
            "src": "contracts\\token\\ProfitMaker.sol:22"
          },
          {
            "contract": "ProfitMaker",
            "label": "mintingEnd",
            "type": "t_uint64",
            "src": "contracts\\token\\ProfitMaker.sol:23"
          },
          {
            "contract": "ProfitMaker",
            "label": "unlocks",
            "type": "t_mapping(t_address,t_struct(Unlock)28130_storage)",
            "src": "contracts\\token\\ProfitMaker.sol:32"
          },
          {
            "contract": "ProfitMaker",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)9154_storage",
            "src": "contracts\\token\\ProfitMaker.sol:34"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)5484": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_struct(Unlock)28130_storage)": {
            "label": "mapping(address => struct ProfitMaker.Unlock)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Unlock)28130_storage": {
            "label": "struct ProfitMaker.Unlock",
            "members": [
              {
                "label": "start",
                "type": "t_uint64"
              },
              {
                "label": "duration",
                "type": "t_uint64"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "balances",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_struct(Counter)9154_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(History)8887_storage)": {
            "label": "mapping(address => struct CheckpointsUpgradeable.History)"
          },
          "t_struct(History)8887_storage": {
            "label": "struct CheckpointsUpgradeable.History",
            "members": [
              {
                "label": "_checkpoints",
                "type": "t_array(t_struct(Checkpoint)8882_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(Checkpoint)8882_storage)dyn_storage": {
            "label": "struct CheckpointsUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)8882_storage": {
            "label": "struct CheckpointsUpgradeable.Checkpoint",
            "members": [
              {
                "label": "_blockNumber",
                "type": "t_uint32"
              },
              {
                "label": "_value",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_mapping(t_address,t_struct(Counter)9154_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "55a75b365628f1badc482c2d73a2443dc9b0bacc519dd34693cef322260dc662": {
      "address": "0x2aFf1528e72F93c858983f88d9Db566dC4e7c06a",
      "txHash": "0xe1170da9ad4e4bc93ee4cc2d0fa8b7f544a5024640e088c0cbaab6decdacad7d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          },
          {
            "contract": "Splitter",
            "label": "div",
            "type": "t_uint8",
            "src": "contracts\\splitter\\Splitter.sol:15"
          },
          {
            "contract": "Splitter",
            "label": "gov",
            "type": "t_uint8",
            "src": "contracts\\splitter\\Splitter.sol:16"
          },
          {
            "contract": "Splitter",
            "label": "dev",
            "type": "t_uint8",
            "src": "contracts\\splitter\\Splitter.sol:17"
          },
          {
            "contract": "Splitter",
            "label": "treasure",
            "type": "t_address",
            "src": "contracts\\splitter\\Splitter.sol:19"
          },
          {
            "contract": "Splitter",
            "label": "devFund",
            "type": "t_address",
            "src": "contracts\\splitter\\Splitter.sol:20"
          }
        ],
        "types": {
          "t_uint8": {
            "label": "uint8"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}

{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x21160EA4ebc4E644777514774965a506a98D01c6",
      "txHash": "0xd6d2c398cc606ac66c1c758d2addeb929b905f65a51fbabd0cabac705bb7994b",
      "kind": "uups"
    },
    {
      "address": "0x152231B068b498612966Ce2D8618895dA8728972",
      "txHash": "0x2481eb22e593f5daeb38e4bda788c1e8be936e9a7543ebb3a39d02d19f20a2c9",
      "kind": "uups"
    },
    {
      "address": "0x4dC2E6Bd77842DAf7890205DFe14aC86FbC61421",
      "txHash": "0xe01b8478a2adf8933d3c5abdad451f0b9fcf5c68b05b7fda9f9f7b4f25ad3014",
      "kind": "uups"
    },
    {
      "address": "0xC2eAfC3F3Ee1677A1C0B827Aa3a410D74653FC91",
      "txHash": "0xe3fcacf51c49dbba5f16ad81807b6a091d592fd2b1319d417fcdee0215329404",
      "kind": "uups"
    },
    {
      "address": "0x8bDd46A71c4819f275e46067166dDC21676c44a7",
      "txHash": "0xd80141bdebd0b75922f1fa29a73fc875b51ea7ba5e282f339e860ff9b74dfb4e",
      "kind": "uups"
    },
    {
      "address": "0x55E7267B5F1a617363cFb1A0E8d8976676A4Fe34",
      "txHash": "0xb44c40f66045080a706eebc8e1237cf3d9c1e4e0ab2fbb411a7902813ac39a31",
      "kind": "uups"
    },
    {
      "address": "0x50B867305F71eBCbbbDD2C9D249d611691B8E458",
      "txHash": "0xaea8c3e59433680b1d17f0c2468daf21926a03c6823ab5a0c16994d4f0ba410c",
      "kind": "uups"
    },
    {
      "address": "0x3e77B810760dEb33e7ebc5270Aa1C348De43a74F",
      "txHash": "0x9d44b5aead4a050dbeaf7eacbde75686d72ea023f834dd7957c7135268b302c7",
      "kind": "uups"
    }
  ],
  "impls": {
    "4f4764d65c47d72658b2d8b3f6395142e4e0f1674f2c090ec3e5bdf58b131f7b": {
      "address": "0xA1bDdeeEF252989729AF9d3676E78A6C5Ed40cAC",
      "txHash": "0x2a5283446d132d7b3dac5786dfc16a8f93a30f483a40bd7a125136e3c5017fd5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_accountBalanceSnapshots",
            "type": "t_mapping(t_address,t_struct(Snapshots)4882_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:64"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_totalSupplySnapshots",
            "type": "t_struct(Snapshots)4882_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:65"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_currentSnapshotId",
            "type": "t_struct(Counter)6712_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:68"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:203"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)6712_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(Counter)6712_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)6712_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(Snapshots)4882_storage)": {
            "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"
          },
          "t_struct(Snapshots)4882_storage": {
            "label": "struct ERC20SnapshotUpgradeable.Snapshots",
            "members": [
              {
                "label": "ids",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "a313c4233c05b43a351a6ce4d637010f5ecc65c9e398c3c2c0157a8e55788ab0": {
      "address": "0x7f1Ea9A4986F354372c49826e28E733693f4f577",
      "txHash": "0xaa90fdb5ba8120e2feabac44b2667826ae904cf153852aa09338bbc254cb92ae",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MintingPool",
            "label": "stakeToken",
            "type": "t_contract(IERC20Upgradeable)4751",
            "src": "contracts/pool/MintingPool.sol:21"
          },
          {
            "contract": "MintingPool",
            "label": "rewardToken",
            "type": "t_contract(IERC20Mintable)8949",
            "src": "contracts/pool/MintingPool.sol:24"
          },
          {
            "contract": "MintingPool",
            "label": "rewardTokensPerBlock",
            "type": "t_uint256",
            "src": "contracts/pool/MintingPool.sol:27"
          },
          {
            "contract": "MintingPool",
            "label": "lastRewardBlock",
            "type": "t_uint256",
            "src": "contracts/pool/MintingPool.sol:30"
          },
          {
            "contract": "MintingPool",
            "label": "accRewardTokensPerShare",
            "type": "t_uint256",
            "src": "contracts/pool/MintingPool.sol:33"
          },
          {
            "contract": "MintingPool",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/pool/MintingPool.sol:36"
          },
          {
            "contract": "MintingPool",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_struct(UserInfo)8959_storage)",
            "src": "contracts/pool/MintingPool.sol:39"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)4751": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IERC20Mintable)8949": {
            "label": "contract IERC20Mintable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserInfo)8959_storage)": {
            "label": "mapping(address => struct IPool.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)8959_storage": {
            "label": "struct IPool.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d7c7a74e6a4cfbf59d8bf7ba497185ed331acd07047a8a5e214839a40bdbb67a": {
      "address": "0xCcFD617116a6f4A1f1a7806d45644C8fC5Ac2B1c",
      "txHash": "0xca31bcad8d79653354add2d2634a8b7a647a842788cc6fe007dba0ef96cb5e03",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "DividendPayer",
            "label": "_received",
            "type": "t_array(t_struct(Received)9010_storage)dyn_storage",
            "src": "contracts/payer/DividendPayer.sol:39"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceivedFrom",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:40"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceived",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:41"
          },
          {
            "contract": "DividendPayer",
            "label": "_payments",
            "type": "t_mapping(t_address,t_array(t_struct(Payment)9017_storage)dyn_storage)",
            "src": "contracts/payer/DividendPayer.sol:43"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaidTo",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:44"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaid",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:46"
          },
          {
            "contract": "DividendPayer",
            "label": "_sharesToken",
            "type": "t_contract(DividendToken)10222",
            "src": "contracts/payer/DividendPayer.sol:48"
          },
          {
            "contract": "DividendPayer",
            "label": "_paymentToken",
            "type": "t_contract(ERC20Upgradeable)4673",
            "src": "contracts/payer/DividendPayer.sol:49"
          }
        ],
        "types": {
          "t_array(t_struct(Received)9010_storage)dyn_storage": {
            "label": "struct DividendPayer.Received[]"
          },
          "t_struct(Received)9010_storage": {
            "label": "struct DividendPayer.Received",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "from",
                "type": "t_address"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_struct(Payment)9017_storage)dyn_storage)": {
            "label": "mapping(address => struct DividendPayer.Payment[])"
          },
          "t_array(t_struct(Payment)9017_storage)dyn_storage": {
            "label": "struct DividendPayer.Payment[]"
          },
          "t_struct(Payment)9017_storage": {
            "label": "struct DividendPayer.Payment",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "to",
                "type": "t_address"
              }
            ]
          },
          "t_contract(DividendToken)10222": {
            "label": "contract DividendToken"
          },
          "t_contract(ERC20Upgradeable)4673": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "41e74c4f6eea36900323a42a05a8061c2e5e3c702a4ac1dacb365a233295742b": {
      "address": "0x69678E6bf7c11e6796016Df7449DB51C43FCb3fD",
      "txHash": "0xe61aecd226dbff12cbcf0581aa181eb6c6b4e9839efce57e7b7713bbe82ddb47",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "IGovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol:225"
          },
          {
            "contract": "IGovernorTimelockUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol:34"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:40"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_proposals",
            "type": "t_mapping(t_uint256,t_struct(ProposalCore)580_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:42"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:366"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingDelay",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:15"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingPeriod",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:16"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_proposalThreshold",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:17"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:126"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "_proposalVotes",
            "type": "t_mapping(t_uint256,t_struct(ProposalVote)2516_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:40"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:116"
          },
          {
            "contract": "GovernorVotesUpgradeable",
            "label": "token",
            "type": "t_contract(ERC20VotesUpgradeable)5981",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:17"
          },
          {
            "contract": "GovernorVotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:36"
          },
          {
            "contract": "GovernorVotesQuorumFractionUpgradeable",
            "label": "_quorumNumerator",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:16"
          },
          {
            "contract": "GovernorVotesQuorumFractionUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:58"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelock",
            "type": "t_contract(TimelockControllerUpgradeable)2468",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:23"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelockIds",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:24"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:163"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(TimelockControllerUpgradeable)2468": {
            "label": "contract TimelockControllerUpgradeable"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_contract(ERC20VotesUpgradeable)5981": {
            "label": "contract ERC20VotesUpgradeable"
          },
          "t_mapping(t_uint256,t_struct(ProposalVote)2516_storage)": {
            "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)"
          },
          "t_struct(ProposalVote)2516_storage": {
            "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
            "members": [
              {
                "label": "againstVotes",
                "type": "t_uint256"
              },
              {
                "label": "forVotes",
                "type": "t_uint256"
              },
              {
                "label": "abstainVotes",
                "type": "t_uint256"
              },
              {
                "label": "hasVoted",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(ProposalCore)580_storage)": {
            "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
          },
          "t_struct(ProposalCore)580_storage": {
            "label": "struct GovernorUpgradeable.ProposalCore",
            "members": [
              {
                "label": "voteStart",
                "type": "t_struct(BlockNumber)7285_storage"
              },
              {
                "label": "voteEnd",
                "type": "t_struct(BlockNumber)7285_storage"
              },
              {
                "label": "executed",
                "type": "t_bool"
              },
              {
                "label": "canceled",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(BlockNumber)7285_storage": {
            "label": "struct TimersUpgradeable.BlockNumber",
            "members": [
              {
                "label": "_deadline",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          }
        }
      }
    },
    "9acddf12f8c41a8117258e3d10e384b35a064f14f91f531be2a59cb2a60471e6": {
      "address": "0x848C5376aA96e00e2DF234382BEBc19ea902E75F",
      "txHash": "0xf3250f0afe995333aa251ca11ce68db5e65868ab58ff6ce646a7ed031e43d82d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Splitter",
            "label": "div",
            "type": "t_uint8",
            "src": "contracts/splitter/Splitter.sol:14"
          },
          {
            "contract": "Splitter",
            "label": "gov",
            "type": "t_uint8",
            "src": "contracts/splitter/Splitter.sol:15"
          },
          {
            "contract": "Splitter",
            "label": "dev",
            "type": "t_uint8",
            "src": "contracts/splitter/Splitter.sol:16"
          },
          {
            "contract": "Splitter",
            "label": "treasure",
            "type": "t_address",
            "src": "contracts/splitter/Splitter.sol:18"
          },
          {
            "contract": "Splitter",
            "label": "devFund",
            "type": "t_address",
            "src": "contracts/splitter/Splitter.sol:19"
          }
        ],
        "types": {
          "t_uint8": {
            "label": "uint8"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0707189d5ac2979ac82aba3bd468f18ff9874d2eb48732b441cd42f33e252648": {
      "address": "0x3059d7762bc85a94949310e4fC4fAfe5638b9dbb",
      "txHash": "0x31512c8c90d5594136589e8546f205059ad2f0cf5ed0ed51cf757a435920d810",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "DividendPayer",
            "label": "_received",
            "type": "t_array(t_struct(Received)3958_storage)dyn_storage",
            "src": "contracts/payer/DividendPayer.sol:40"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceivedFrom",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:41"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceived",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:42"
          },
          {
            "contract": "DividendPayer",
            "label": "_payments",
            "type": "t_mapping(t_address,t_array(t_struct(Payment)3965_storage)dyn_storage)",
            "src": "contracts/payer/DividendPayer.sol:44"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaidTo",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:45"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaid",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:47"
          },
          {
            "contract": "DividendPayer",
            "label": "_sharesToken",
            "type": "t_contract(DividendToken)4623",
            "src": "contracts/payer/DividendPayer.sol:49"
          },
          {
            "contract": "DividendPayer",
            "label": "_paymentToken",
            "type": "t_contract(ERC20Upgradeable)1731",
            "src": "contracts/payer/DividendPayer.sol:50"
          }
        ],
        "types": {
          "t_array(t_struct(Received)3958_storage)dyn_storage": {
            "label": "struct DividendPayer.Received[]"
          },
          "t_struct(Received)3958_storage": {
            "label": "struct DividendPayer.Received",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "from",
                "type": "t_address"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_struct(Payment)3965_storage)dyn_storage)": {
            "label": "mapping(address => struct DividendPayer.Payment[])"
          },
          "t_array(t_struct(Payment)3965_storage)dyn_storage": {
            "label": "struct DividendPayer.Payment[]"
          },
          "t_struct(Payment)3965_storage": {
            "label": "struct DividendPayer.Payment",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "to",
                "type": "t_address"
              }
            ]
          },
          "t_contract(DividendToken)4623": {
            "label": "contract DividendToken"
          },
          "t_contract(ERC20Upgradeable)1731": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5d58f926cc9fa80638f6351665f0333459638f3286121303702de5037b011400": {
      "address": "0xb3ad2C4229B38eF53E9FDB51358136f9FE039eb1",
      "txHash": "0x2811298070aaafa80b14f9d374e15172978a1b74facfdb1889d129e12a0075e4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_accountBalanceSnapshots",
            "type": "t_mapping(t_address,t_struct(Snapshots)5586_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_totalSupplySnapshots",
            "type": "t_struct(Snapshots)5586_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_currentSnapshotId",
            "type": "t_struct(Counter)9154_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)9154_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:99"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "contract": "DividendToken",
            "label": "totalBurnedByBurner",
            "type": "t_uint256",
            "src": "contracts/token/DividendToken.sol:18"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(Counter)9154_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)9154_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(Snapshots)5586_storage)": {
            "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"
          },
          "t_struct(Snapshots)5586_storage": {
            "label": "struct ERC20SnapshotUpgradeable.Snapshots",
            "members": [
              {
                "label": "ids",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "e6785108300a9667721abc89d5d7a560823f91795c270e4e47d1665c225781f8": {
      "address": "0x2B6dB5F594B174F9ED7Ae4dB1b456e666FF1DD74",
      "txHash": "0xccfa0c86de6891784d3a2a3e530f613251e4b944bb7748ef9ebc8e8bd6915535",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_delegation",
            "type": "t_mapping(t_address,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:44"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_delegateCheckpoints",
            "type": "t_mapping(t_address,t_struct(History)3345_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:45"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_totalCheckpoints",
            "type": "t_struct(History)3345_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:46"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)3612_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:48"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:223"
          },
          {
            "contract": "ERC721VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/draft-ERC721VotesUpgradeable.sol:52"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "profitToken",
            "type": "t_contract(IERC20Upgradeable)1352",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:22"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "epoch",
            "type": "t_uint8",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:23"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "toMint",
            "type": "t_uint8",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:24"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "mintingStart",
            "type": "t_uint64",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:25"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "mintingEnd",
            "type": "t_uint64",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:26"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "unlocks",
            "type": "t_mapping(t_address,t_struct(Unlock)5117_storage)",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:40"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "_usedColors",
            "type": "t_mapping(t_uint24,t_bool)",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:41"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "props",
            "type": "t_mapping(t_uint256,t_struct(Props)5122_storage)",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:42"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)3612_storage",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:44"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1352": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_struct(Unlock)5117_storage)": {
            "label": "mapping(address => struct ProfitMakerTestnet.Unlock)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Unlock)5117_storage": {
            "label": "struct ProfitMakerTestnet.Unlock",
            "members": [
              {
                "label": "start",
                "type": "t_uint64"
              },
              {
                "label": "duration",
                "type": "t_uint64"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "balances",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint24,t_bool)": {
            "label": "mapping(uint24 => bool)"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Props)5122_storage)": {
            "label": "mapping(uint256 => struct ProfitMakerTestnet.Props)"
          },
          "t_struct(Props)5122_storage": {
            "label": "struct ProfitMakerTestnet.Props",
            "members": [
              {
                "label": "color",
                "type": "t_uint24"
              },
              {
                "label": "epoch",
                "type": "t_uint8"
              }
            ]
          },
          "t_struct(Counter)3612_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(History)3345_storage)": {
            "label": "mapping(address => struct CheckpointsUpgradeable.History)"
          },
          "t_struct(History)3345_storage": {
            "label": "struct CheckpointsUpgradeable.History",
            "members": [
              {
                "label": "_checkpoints",
                "type": "t_array(t_struct(Checkpoint)3340_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(Checkpoint)3340_storage)dyn_storage": {
            "label": "struct CheckpointsUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)3340_storage": {
            "label": "struct CheckpointsUpgradeable.Checkpoint",
            "members": [
              {
                "label": "_blockNumber",
                "type": "t_uint32"
              },
              {
                "label": "_value",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_mapping(t_address,t_struct(Counter)3612_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "8267d5ba19b68af781b35a4416887bdd873930fec36652c6edc18252f3ea40da": {
      "address": "0x580a51C3afF068b21A2f368e656D8d4a39E6Cb6a",
      "txHash": "0x54b1d91c316a66859102cc1a15b6961eadb4bda99cd069e41a6f886d07f3f388",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "IGovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol:230"
          },
          {
            "contract": "IGovernorTimelockUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol:38"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:40"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_proposals",
            "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:42"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:397"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingDelay",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:15"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingPeriod",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:16"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_proposalThreshold",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:17"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:129"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "_proposalVotes",
            "type": "t_mapping(t_uint256,t_struct(ProposalVote)2504_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:36"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:118"
          },
          {
            "contract": "GovVotes",
            "label": "VOTES_BASE_MULTIPLIER",
            "type": "t_uint64",
            "src": "contracts/governance/GovVotes.sol:30"
          },
          {
            "contract": "GovVotes",
            "label": "govFT",
            "type": "t_array(t_struct(GovFT)11607_storage)dyn_storage",
            "src": "contracts/governance/GovVotes.sol:32"
          },
          {
            "contract": "GovVotes",
            "label": "govNFT",
            "type": "t_array(t_struct(GovNFT)11615_storage)dyn_storage",
            "src": "contracts/governance/GovVotes.sol:33"
          },
          {
            "contract": "GovVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/governance/GovVotes.sol:91"
          },
          {
            "contract": "GovVotesQuorumFraction",
            "label": "_quorumNumerator",
            "type": "t_uint256",
            "src": "contracts/governance/GovVotesQuorumFraction.sol:18"
          },
          {
            "contract": "GovVotesQuorumFraction",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/governance/GovVotesQuorumFraction.sol:73"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelock",
            "type": "t_contract(TimelockControllerUpgradeable)2468",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:28"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelockIds",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:29"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:174"
          },
          {
            "contract": "GovernorPreventLateQuorumUpgradeable",
            "label": "_voteExtension",
            "type": "t_uint64",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorPreventLateQuorumUpgradeable.sol:25"
          },
          {
            "contract": "GovernorPreventLateQuorumUpgradeable",
            "label": "_extendedDeadlines",
            "type": "t_mapping(t_uint256,t_struct(BlockNumber)9596_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorPreventLateQuorumUpgradeable.sol:26"
          },
          {
            "contract": "GovernorPreventLateQuorumUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorPreventLateQuorumUpgradeable.sol:118"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_uint256,t_struct(BlockNumber)9596_storage)": {
            "label": "mapping(uint256 => struct TimersUpgradeable.BlockNumber)"
          },
          "t_struct(BlockNumber)9596_storage": {
            "label": "struct TimersUpgradeable.BlockNumber",
            "members": [
              {
                "label": "_deadline",
                "type": "t_uint64"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_contract(TimelockControllerUpgradeable)2468": {
            "label": "contract TimelockControllerUpgradeable"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_array(t_struct(GovFT)11607_storage)dyn_storage": {
            "label": "struct GovVotes.GovFT[]"
          },
          "t_struct(GovFT)11607_storage": {
            "label": "struct GovVotes.GovFT",
            "members": [
              {
                "label": "token",
                "type": "t_contract(ERC20VotesUpgradeable)6553"
              },
              {
                "label": "multiplier",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(ERC20VotesUpgradeable)6553": {
            "label": "contract ERC20VotesUpgradeable"
          },
          "t_array(t_struct(GovNFT)11615_storage)dyn_storage": {
            "label": "struct GovVotes.GovNFT[]"
          },
          "t_struct(GovNFT)11615_storage": {
            "label": "struct GovVotes.GovNFT",
            "members": [
              {
                "label": "token",
                "type": "t_contract(ERC721VotesUpgradeable)8544"
              },
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "noQuorum",
                "type": "t_bool"
              }
            ]
          },
          "t_contract(ERC721VotesUpgradeable)8544": {
            "label": "contract ERC721VotesUpgradeable"
          },
          "t_mapping(t_uint256,t_struct(ProposalVote)2504_storage)": {
            "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)"
          },
          "t_struct(ProposalVote)2504_storage": {
            "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
            "members": [
              {
                "label": "againstVotes",
                "type": "t_uint256"
              },
              {
                "label": "forVotes",
                "type": "t_uint256"
              },
              {
                "label": "abstainVotes",
                "type": "t_uint256"
              },
              {
                "label": "hasVoted",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
            "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
          },
          "t_struct(ProposalCore)570_storage": {
            "label": "struct GovernorUpgradeable.ProposalCore",
            "members": [
              {
                "label": "voteStart",
                "type": "t_struct(BlockNumber)9596_storage"
              },
              {
                "label": "voteEnd",
                "type": "t_struct(BlockNumber)9596_storage"
              },
              {
                "label": "executed",
                "type": "t_bool"
              },
              {
                "label": "canceled",
                "type": "t_bool"
              }
            ]
          }
        }
      }
    },
    "c8a238ad9543f30099e7535bf3671d10b0f33947222f941b08d79cbaf56b5e7c": {
      "address": "0x4835FcAA68F745F3c1BA3C7D22b3fBdF937A038C",
      "txHash": "0x4ab549f2d50fb19f4a0d25dfe45c0151f591ae4d61187fe837c324fd969876b8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_delegation",
            "type": "t_mapping(t_address,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:44"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_delegateCheckpoints",
            "type": "t_mapping(t_address,t_struct(History)8887_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:45"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_totalCheckpoints",
            "type": "t_struct(History)8887_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:46"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)9154_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:48"
          },
          {
            "contract": "VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:223"
          },
          {
            "contract": "ERC721VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/draft-ERC721VotesUpgradeable.sol:52"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "profitToken",
            "type": "t_contract(IERC20Upgradeable)5484",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:22"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "epoch",
            "type": "t_uint8",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:23"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "toMint",
            "type": "t_uint8",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:24"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "mintingStart",
            "type": "t_uint64",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:25"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "mintingEnd",
            "type": "t_uint64",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:26"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "unlocks",
            "type": "t_mapping(t_address,t_struct(Unlock)12181_storage)",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:40"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "_usedColors",
            "type": "t_mapping(t_uint24,t_bool)",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:41"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "props",
            "type": "t_mapping(t_uint256,t_struct(Props)12186_storage)",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:42"
          },
          {
            "contract": "ProfitMakerTestnet",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)9154_storage",
            "src": "contracts/mocks/ProfitMakerTestnet.sol:44"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)5484": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_struct(Unlock)12181_storage)": {
            "label": "mapping(address => struct ProfitMakerTestnet.Unlock)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Unlock)12181_storage": {
            "label": "struct ProfitMakerTestnet.Unlock",
            "members": [
              {
                "label": "start",
                "type": "t_uint64"
              },
              {
                "label": "duration",
                "type": "t_uint64"
              },
              {
                "label": "released",
                "type": "t_uint256"
              },
              {
                "label": "balances",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint24,t_bool)": {
            "label": "mapping(uint24 => bool)"
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Props)12186_storage)": {
            "label": "mapping(uint256 => struct ProfitMakerTestnet.Props)"
          },
          "t_struct(Props)12186_storage": {
            "label": "struct ProfitMakerTestnet.Props",
            "members": [
              {
                "label": "color",
                "type": "t_uint24"
              },
              {
                "label": "epoch",
                "type": "t_uint8"
              }
            ]
          },
          "t_struct(Counter)9154_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(History)8887_storage)": {
            "label": "mapping(address => struct CheckpointsUpgradeable.History)"
          },
          "t_struct(History)8887_storage": {
            "label": "struct CheckpointsUpgradeable.History",
            "members": [
              {
                "label": "_checkpoints",
                "type": "t_array(t_struct(Checkpoint)8882_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(Checkpoint)8882_storage)dyn_storage": {
            "label": "struct CheckpointsUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)8882_storage": {
            "label": "struct CheckpointsUpgradeable.Checkpoint",
            "members": [
              {
                "label": "_blockNumber",
                "type": "t_uint32"
              },
              {
                "label": "_value",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_mapping(t_address,t_struct(Counter)9154_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    }
  }
}

{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x9844a1c30462B55cd383A2C06f90BB4171f9D4bB",
      "txHash": "0xd67b2465cc5a7e2be8bb7447fc62b7c1613e0495d24d4116645541ea84a8cada",
      "kind": "uups"
    },
    {
      "address": "0x29353bB4c9010c6112a77d702Ac890e70CD73d53",
      "txHash": "0x269b1cdefc9c39a333d504de03f0be35427021e6ced82dc6c77edc6f3fe826a6",
      "kind": "uups"
    },
    {
      "address": "0xf81FCd61b18BAb470418161B6cFaF95a3796762b",
      "txHash": "0xf583cb11a261bd1d3fad7a2c25ede3d02946d1da4bbd56e928724a237ce913ee",
      "kind": "uups"
    },
    {
      "address": "0x7EE76C309ed8AdCfE9681E05c7612706014274a3",
      "txHash": "0x909207e2542e3395a12471a0096f7a26a043c4879a5db7811342142c17093d93",
      "kind": "uups"
    },
    {
      "address": "0xa2B13bc8d067a73C75bd09C6991c45D21b1067b2",
      "txHash": "0xcf7710753ea7525660365371e6baeb5f486089caf0f8c859344b3f8b5e9c70b3",
      "kind": "uups"
    },
    {
      "address": "0x2165f4F4F13A7cd900cfCC9035AB03401fe9270C",
      "txHash": "0x81b5f60ee81d7289d220962be02db792c72b8c313211a35776ec00cbda543807",
      "kind": "uups"
    }
  ],
  "impls": {
    "4f4764d65c47d72658b2d8b3f6395142e4e0f1674f2c090ec3e5bdf58b131f7b": {
      "address": "0xd4A5f0A6Bf09c1DC042254329ac144D99412f3a5",
      "txHash": "0x3c25c9980ca0de1366c2594578246a62619164e6493333aa1911c84bfadfa83e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_accountBalanceSnapshots",
            "type": "t_mapping(t_address,t_struct(Snapshots)5013_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:64"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_totalSupplySnapshots",
            "type": "t_struct(Snapshots)5013_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:65"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_currentSnapshotId",
            "type": "t_struct(Counter)6843_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:68"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:203"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)6843_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(Counter)6843_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)6843_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(Snapshots)5013_storage)": {
            "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"
          },
          "t_struct(Snapshots)5013_storage": {
            "label": "struct ERC20SnapshotUpgradeable.Snapshots",
            "members": [
              {
                "label": "ids",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "7c8005a0462e014e6a702fb98d0353ee1e7e1d1d2c4da7c4ad791837d9e994c6": {
      "address": "0x2Eb19D50620B194e7bE5c30ad2826A2c71FFf7ec",
      "txHash": "0x12809ea1aa7e8e8809d53b2c37483b011022e462cbbbc3649bcf61a025fc433a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "MintingPool",
            "label": "stakeToken",
            "type": "t_contract(IERC20Upgradeable)4882",
            "src": "contracts/pool/MintingPool.sol:21"
          },
          {
            "contract": "MintingPool",
            "label": "rewardToken",
            "type": "t_contract(IERC20Mintable)11430",
            "src": "contracts/pool/MintingPool.sol:24"
          },
          {
            "contract": "MintingPool",
            "label": "rewardTokensPerBlock",
            "type": "t_uint256",
            "src": "contracts/pool/MintingPool.sol:27"
          },
          {
            "contract": "MintingPool",
            "label": "lastRewardBlock",
            "type": "t_uint256",
            "src": "contracts/pool/MintingPool.sol:30"
          },
          {
            "contract": "MintingPool",
            "label": "accRewardTokensPerShare",
            "type": "t_uint256",
            "src": "contracts/pool/MintingPool.sol:33"
          },
          {
            "contract": "MintingPool",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_struct(UserInfo)11440_storage)",
            "src": "contracts/pool/MintingPool.sol:36"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)4882": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IERC20Mintable)11430": {
            "label": "contract IERC20Mintable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserInfo)11440_storage)": {
            "label": "mapping(address => struct IPool.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)11440_storage": {
            "label": "struct IPool.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d7c7a74e6a4cfbf59d8bf7ba497185ed331acd07047a8a5e214839a40bdbb67a": {
      "address": "0xCe297D0aBD4c2198f350DeF8EA01166cDf912502",
      "txHash": "0x2d3833714ca50ea81a06fc412a27db70d661b0d73283b1907aa9fab2047b4e4f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "DividendPayer",
            "label": "_received",
            "type": "t_array(t_struct(Received)9215_storage)dyn_storage",
            "src": "contracts/payer/DividendPayer.sol:40"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceivedFrom",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:41"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceived",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:42"
          },
          {
            "contract": "DividendPayer",
            "label": "_payments",
            "type": "t_mapping(t_address,t_array(t_struct(Payment)9222_storage)dyn_storage)",
            "src": "contracts/payer/DividendPayer.sol:44"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaidTo",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:45"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaid",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:47"
          },
          {
            "contract": "DividendPayer",
            "label": "_sharesToken",
            "type": "t_contract(DividendToken)10698",
            "src": "contracts/payer/DividendPayer.sol:49"
          },
          {
            "contract": "DividendPayer",
            "label": "_paymentToken",
            "type": "t_contract(ERC20Upgradeable)4804",
            "src": "contracts/payer/DividendPayer.sol:50"
          }
        ],
        "types": {
          "t_array(t_struct(Received)9215_storage)dyn_storage": {
            "label": "struct DividendPayer.Received[]"
          },
          "t_struct(Received)9215_storage": {
            "label": "struct DividendPayer.Received",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "from",
                "type": "t_address"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_struct(Payment)9222_storage)dyn_storage)": {
            "label": "mapping(address => struct DividendPayer.Payment[])"
          },
          "t_array(t_struct(Payment)9222_storage)dyn_storage": {
            "label": "struct DividendPayer.Payment[]"
          },
          "t_struct(Payment)9222_storage": {
            "label": "struct DividendPayer.Payment",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "to",
                "type": "t_address"
              }
            ]
          },
          "t_contract(DividendToken)10698": {
            "label": "contract DividendToken"
          },
          "t_contract(ERC20Upgradeable)4804": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "41e74c4f6eea36900323a42a05a8061c2e5e3c702a4ac1dacb365a233295742b": {
      "address": "0xDFd33dF050c85B9efB3D3601456e2BdD4659ABCC",
      "txHash": "0x1509bbfe57530f02dd28cf6664fb3125e3b863fd4c1203c45acf3e8046ae6a2a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "IGovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol:225"
          },
          {
            "contract": "IGovernorTimelockUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol:34"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:40"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "_proposals",
            "type": "t_mapping(t_uint256,t_struct(ProposalCore)580_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:42"
          },
          {
            "contract": "GovernorUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:366"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingDelay",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:15"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_votingPeriod",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:16"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "_proposalThreshold",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:17"
          },
          {
            "contract": "GovernorSettingsUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:126"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "_proposalVotes",
            "type": "t_mapping(t_uint256,t_struct(ProposalVote)2516_storage)",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:40"
          },
          {
            "contract": "GovernorCountingSimpleUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:116"
          },
          {
            "contract": "GovernorVotesUpgradeable",
            "label": "token",
            "type": "t_contract(ERC20VotesUpgradeable)5981",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:17"
          },
          {
            "contract": "GovernorVotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:36"
          },
          {
            "contract": "GovernorVotesQuorumFractionUpgradeable",
            "label": "_quorumNumerator",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:16"
          },
          {
            "contract": "GovernorVotesQuorumFractionUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:58"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelock",
            "type": "t_contract(TimelockControllerUpgradeable)2468",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:23"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "_timelockIds",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:24"
          },
          {
            "contract": "GovernorTimelockControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:163"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(TimelockControllerUpgradeable)2468": {
            "label": "contract TimelockControllerUpgradeable"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_contract(ERC20VotesUpgradeable)5981": {
            "label": "contract ERC20VotesUpgradeable"
          },
          "t_mapping(t_uint256,t_struct(ProposalVote)2516_storage)": {
            "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)"
          },
          "t_struct(ProposalVote)2516_storage": {
            "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
            "members": [
              {
                "label": "againstVotes",
                "type": "t_uint256"
              },
              {
                "label": "forVotes",
                "type": "t_uint256"
              },
              {
                "label": "abstainVotes",
                "type": "t_uint256"
              },
              {
                "label": "hasVoted",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(ProposalCore)580_storage)": {
            "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
          },
          "t_struct(ProposalCore)580_storage": {
            "label": "struct GovernorUpgradeable.ProposalCore",
            "members": [
              {
                "label": "voteStart",
                "type": "t_struct(BlockNumber)7285_storage"
              },
              {
                "label": "voteEnd",
                "type": "t_struct(BlockNumber)7285_storage"
              },
              {
                "label": "executed",
                "type": "t_bool"
              },
              {
                "label": "canceled",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(BlockNumber)7285_storage": {
            "label": "struct TimersUpgradeable.BlockNumber",
            "members": [
              {
                "label": "_deadline",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          }
        }
      }
    },
    "9acddf12f8c41a8117258e3d10e384b35a064f14f91f531be2a59cb2a60471e6": {
      "address": "0x50B867305F71eBCbbbDD2C9D249d611691B8E458",
      "txHash": "0xeab66430f803fbe909e9e5b7d173b04db19a49ed23ec911ea91b4f9c8f11dc6b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "Splitter",
            "label": "div",
            "type": "t_uint8",
            "src": "contracts/splitter/Splitter.sol:14"
          },
          {
            "contract": "Splitter",
            "label": "gov",
            "type": "t_uint8",
            "src": "contracts/splitter/Splitter.sol:15"
          },
          {
            "contract": "Splitter",
            "label": "dev",
            "type": "t_uint8",
            "src": "contracts/splitter/Splitter.sol:16"
          },
          {
            "contract": "Splitter",
            "label": "treasure",
            "type": "t_address",
            "src": "contracts/splitter/Splitter.sol:18"
          },
          {
            "contract": "Splitter",
            "label": "devFund",
            "type": "t_address",
            "src": "contracts/splitter/Splitter.sol:19"
          }
        ],
        "types": {
          "t_uint8": {
            "label": "uint8"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0707189d5ac2979ac82aba3bd468f18ff9874d2eb48732b441cd42f33e252648": {
      "address": "0x8A2F83418B35A09A8519A8c8fAd9aDaEa70cDd52",
      "txHash": "0x8a52661915fbfe576d26ebecccf61941971d9ebb9512ee1800c0350bea4dd18e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "DividendPayer",
            "label": "_received",
            "type": "t_array(t_struct(Received)3958_storage)dyn_storage",
            "src": "contracts/payer/DividendPayer.sol:40"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceivedFrom",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:41"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalReceived",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:42"
          },
          {
            "contract": "DividendPayer",
            "label": "_payments",
            "type": "t_mapping(t_address,t_array(t_struct(Payment)3965_storage)dyn_storage)",
            "src": "contracts/payer/DividendPayer.sol:44"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaidTo",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/payer/DividendPayer.sol:45"
          },
          {
            "contract": "DividendPayer",
            "label": "_totalPaid",
            "type": "t_uint256",
            "src": "contracts/payer/DividendPayer.sol:47"
          },
          {
            "contract": "DividendPayer",
            "label": "_sharesToken",
            "type": "t_contract(DividendToken)4623",
            "src": "contracts/payer/DividendPayer.sol:49"
          },
          {
            "contract": "DividendPayer",
            "label": "_paymentToken",
            "type": "t_contract(ERC20Upgradeable)1731",
            "src": "contracts/payer/DividendPayer.sol:50"
          }
        ],
        "types": {
          "t_array(t_struct(Received)3958_storage)dyn_storage": {
            "label": "struct DividendPayer.Received[]"
          },
          "t_struct(Received)3958_storage": {
            "label": "struct DividendPayer.Received",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "from",
                "type": "t_address"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_array(t_struct(Payment)3965_storage)dyn_storage)": {
            "label": "mapping(address => struct DividendPayer.Payment[])"
          },
          "t_array(t_struct(Payment)3965_storage)dyn_storage": {
            "label": "struct DividendPayer.Payment[]"
          },
          "t_struct(Payment)3965_storage": {
            "label": "struct DividendPayer.Payment",
            "members": [
              {
                "label": "snapshotId",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "to",
                "type": "t_address"
              }
            ]
          },
          "t_contract(DividendToken)4623": {
            "label": "contract DividendToken"
          },
          "t_contract(ERC20Upgradeable)1731": {
            "label": "contract ERC20Upgradeable"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5d58f926cc9fa80638f6351665f0333459638f3286121303702de5037b011400": {
      "address": "0xDB0dfDA7d2ebdb724E131111fc50D475b369957b",
      "txHash": "0x65b2b5e8f3b1f2fce72869205b183d38d76d82fd9bb3b8eb485dd54e2fc474bd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_accountBalanceSnapshots",
            "type": "t_mapping(t_address,t_struct(Snapshots)5586_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_totalSupplySnapshots",
            "type": "t_struct(Snapshots)5586_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "_currentSnapshotId",
            "type": "t_struct(Counter)9154_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
          },
          {
            "contract": "ERC20SnapshotUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)9154_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:99"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "contract": "DividendToken",
            "label": "totalBurnedByBurner",
            "type": "t_uint256",
            "src": "contracts/token/DividendToken.sol:18"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(Counter)9154_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)9154_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(Snapshots)5586_storage)": {
            "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"
          },
          "t_struct(Snapshots)5586_storage": {
            "label": "struct ERC20SnapshotUpgradeable.Snapshots",
            "members": [
              {
                "label": "ids",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    }
  }
}
